{
    "text": " you you you you Добро пожаловать на третий урок курса введения в юнит тестирования. На этом уроке мы поговорим о качестве тестов. Но для начала давайте вспомним, о чем же мы говорили на предыдущей лекции. На предыдущей лекции мы дали определение юнит тестам. Мы разобрались с тем, когда и где лучше их писать. Мы обсудили структуру тестов, рассмотрели существующие фреймворки для юнит тестирования, познакомились с фреймворками семейства XUnit, а также установили и научились пользоваться фреймворком GUnit 5 для модульного тестирования. На данном уроке мы поговорим о качестве тестов, обсудим тестирование по принципу черного и белого ящиков, поговорим о метриках тестов, рассмотрим инструменты для измерения покрытия тестами, а также поговорим про разработку через тестирование и тестирование через поведение. Хорошие тесты помогают предотвратить стагнацию и сохранить темп разработки со временем. С хорошими тестами вы будете уверены в том, что изменения функциональности не приведут к новым ошибкам. Поэтому очень важно писать качественные тесты. И сегодня на уроке мы научимся писать качественные тесты, а также посмотрим на написание тестов несколько по другим углам, когда будем говорить о разработке через тестирование. Как мы помним из предыдущих лекций, целью юнит-тестирования является обеспечение стабильного роста проекта. Но невозможно добиться этой цели, просто написав большое количество тестов. Но невозможно добиться этой цели, просто написав большое количество тестов. Ведь они должны учитывать критичность функционала, который мы покрываем, а также стоимость их поддержки. Давайте представим себе две ситуации. Первая ситуация. Мы работаем на крупном проекте, хотим внести изменения в существующую функциональность и запускаем тесты. Наши тесты завершаются неудачей и мы тратим несколько дней на то, чтобы разобраться с причинами падений. В результате оказывается, что наш тест был написан некорректно и это было ложное срабатывание. Как минимум это неприятно. А также давайте рассмотрим еще одну ситуацию, когда мы запускаем наши тесты, они также завершаются неудачей и мы пытаемся разобраться, что же случилось. Приходим, смотрим, и нам совершенно непонятно, что же тестирует тест, потому что название метода непонятно, логи отсутствуют, структура теста нарушена. Все это забирает ресурсы у бизнеса, а нам, как разработчикам, доставляет дополнительные неудобства, дополнительные нервы и так далее. На данном слайде мы видим график с двумя линиями. Красная линия показывает нам проект без тестов, а зеленая линия проект с тестами. Как видим, проект без тестов стартует чуть раньше, но в дальнейшем он может стагнировать или вообще остановиться. Это происходит потому, что на начальном этапе мы не тратим никаких ресурсов на то, чтобы писать тесты, а переходим непосредственно к реализации бизнес-логики. Со временем, когда проект растет, количество бизнес-логики увеличивается, количество зависимости также увеличивается и становится все сложнее обнаруживать и исправлять дефекты. В то же время проект с тестами стартует несколько позже. Это происходит потому, что на начальном этапе мы тратим время на написание самих тестов и только потом переходим к реализации бизнес-логики. Но как видно по графику, проекты с тестами развиваются более стабильно, просто потому что тесты обеспечивают так называемую подушку безопасности когда мы добавляем новый функционал мы можем быть уверены в том что старый функционал не сломается ошибки поджидают нас на каждом этапе разработки ошибки могут возникать вследствие внесения изменений в существующую функциональность или при добавлении новой функциональности. Такие ошибки, как правило, называются регрессионными. Данное название происходит от слова «регресс», то есть это движение назад или откат. Во многих командах разработки выделяется отдельное время на регрессионное тестирование. Это некое собирательное определение всех возможных видов тестирования, которые проводятся для того, чтобы убедиться в том, что функционал, когда разработчики устраняют ранее обнаруженные дефекты и баги, а также когда мы исправляем проблемы с производительностью. Таким образом, мы можем говорить о том, что защита от регрессий – это первый атрибут качественного юнит-теста. Чем больше кода проверяет тест, тем выше вероятность выявить баг. Но недостаточно опираться только на такую метрику. Ведь если код не несет в себе никакой критической бизнес-логики, а выполняет достаточно тривиальные функции, то ценность такого теста падает. Поэтому при выборе функционала, который необходимо покрывать юнит тестами, необходимо четко осознавать, что мы тестируем и зачем. И, как правило, выбор остается на стороне критичного бизнес-функционала. А теперь вопрос. Какие из представленных на слайде функций нужно тестировать, а какие нет? Первое. Метод, который возвращает сегодняшнее число. Этот метод может использоваться, например например когда пользователь заходит на сайт и ему нужно подтвердить что его возраст 18 или более лет второе метод который проверяет доступен ли данный товар для самовывоза в интернет-магазине в конкретном городе то есть здесь мы говорим о ситу, когда пользователь зашел в интернет-магазин, выбирает город, выбирает понравившийся товар и хочет оформить доставку. Третий метод, который проверяет возможность авторизации пользователя. Точно так же можем спроецировать это на наш интернет-магазин. Допустим, что неавторизованные пользователи не могут осуществлять заказы. И четвертое это метод который ищет пользователя из базы данных по идее например если мы хотим позволить нашим пользователям интернет-магазина оставлять отзывы о товаре конечно мы можем протестировать вообще все но в основном это не имеет никакого смысла давайте же ответим на наш вопрос. Соответственно, метод, который возвращает сегодняшнее число, можно не тестировать. Это достаточно тривиальная операция и здесь можно обойтись только проверками if-else. А вот метод, который проверяет, доступен ли данный товар для самовывоза в интернет-магазине в конкретном городе, тестировать нужно, потому что это очень важный кусок бизнес логики для нашего интернет-магазина если он будет работать неправильно мы потеряем доход то же самое относится и к методу который проверяет возможность авторизации пользователя как мы и сказали ранее не авторизованные пользователи не могут осуществлять какие-либо заказы а значит если метод будет неправильно мы также потеряем в деньгах. А вот метод, который ищет пользователя по идентификатору в базе данных, тестировать не обязательно. Хотя бы потому, что мы делаем запрос в базу через некую прослойку JPA, которая уже написана и протестирована до нас. Кроме того, такой запрос также является достаточно тривиальным. Резюмируя, первый атрибут качественного юнит теста это защита от регрессии. Нужно тестировать как можно больше кода и при этом этот код должен нести какую-то важность с точки зрения бизнес логики. Второй и третий атрибуты тесно связаны между собой. Когда мы пишем юнит-тест, мы должны задаваться вопросами, потребуются ли какие-либо изменения в нашем тесте в случае, если изменится реализация тестируемого функционала. И второй вопрос, как много ресурсов понадобится от тестировщика или разработчика, который впервые видит наш тест для того, чтобы внести изменения. Таким образом, мы приходим к тому, что второе и третье атрибуты – это устойчивость к новым изменениям и простота поддержки. То есть устойчивость к новым изменениям определяет, насколько хорошо тест может пережить рефакторинг тестируемого нами кода. Что такое рефакторинг? Рефакторинг это изменение деталей имплементации без изменения наблюдаемого поведения. А простота поддержки оценивает затраты на сопровождение кода. На слайде показано взаимодействие пользователя с тестируемой системой. Пользователь вводит какие-то данные, система производит необходимые вычисления, это шаг 1, шаг 2 и шаг 3 и возвращает пользователю какой-то результат. Давайте рассмотрим, как могла бы выглядеть такая схема взаимодействия на примере нашего класса калькулятор из прошлой лекции пользователь приходит передает метод операнды и оператор на первом шаге на втором шаге метод calculation производит необходимые вычисления а на третьем шаге метод возвращает пользователю результат на данном слайде мы видим пример плохого теста который неустойчив к изменениям когда мы пишем юнит тест очень неправильно привязываться к тому, как реализован метод, вместо того, чтобы проверять ожидаемый результат. Конечно, наш метод очень сложно протестировать неправильно, ведь там всего одна функция calculation. Рассмотрим еще один пример неудачного теста, привязанного к реализации метода. В данном тесте мы вычитываем содержимое класса калькулятор и пытаемся сравнить его с некой строкой, в которой мы описали ожидаемое содержимое нашего класса. Такой тест очень неустойчив к изменениям, потому что при малейших доработках в нашем классе он будет завершаться с ошибкой. На данном слайде мы видим пример правильно спроектированного теста. Хороший тест не должен основываться на внутренней реализации метода, а должен лишь проверять ожидаемый результат. Это как раз то, что интересно пользователю. И в случае, если в методе что-то произойдет не так мы получим неверный результат и это будет сигналом о том что образовался дефект тест должен проверять результаты работы они то как этот результат достигается конечно такой тест не идеален потому что в систему все еще можно внести изменения которые могут нарушить его работу. Например, можно добавить дополнительный шаг или изменить возвращаемый результат. На примере нашего метода Calculation можно представить, что в какой-то момент мы решили передавать параметры не отдельно, а вместе, одной строкой. Таким образом, это также будет ложное срабатывание, ведь мы не изменили логику вычислений. Но при этом стоит заметить, что такой тест все еще достаточно легко отрефакторить. Для этого необходимо всего лишь следовать рекомендациям нашей среды разработки. Теперь собираем все вместе. В данный момент мы обсудили уже три атрибута качественного юнит-теста. Первый – это защита от регрессий. Второй – устойчивость к новым изменениям и третий – простота поддержки. Перейдем к четвертому атрибуту. Четвертый атрибут – это быстрая обратная связь. В идеальном случае тесты должны предупреждать нас об ошибках сразу же после внесения изменения в функциональность. В таком случае затраты на исправление дефектов сводятся практически до нуля. Если тесты будут выполняться медленно, их не будут поддерживать и это отобьет всяческую охоту у разработчика запускать их как можно чаще. Для того чтобы тесты выполнялись быстро, они должны быть первое небольшими и второе должны быть изолированы от каких-то других зависимостей. Итак, четыре атрибута хороших юнит тестов. защита от регрессий, устойчивость к новым изменениям, простота поддержки и быстрая обратная связь. Все эти атрибуты применимы не только к юнит тестам, могут применяться также и к другим видам тестов например к интеграционным к сожалению не существует какой-то утилиты в которую можно было бы просто передать тест и она выдала бы нам оценку качества нашего теста но при этом чисто логически можно оценить качество наших тестов по каждому из этих атрибутов чтобы тест был эффективным он должен демонстрировать результативность в каждой из четырех категорий но к сожалению все эти категории взаимоисключающие поэтому такой тест создать невозможно четвертый атрибут простота поддержки не сильно связан с остальными тремя, за исключением сквозных end-to-end тестов. Поэтому будем рассматривать его совместно с атрибутом «Устойчивость к новым изменениям». Таким образом, невозможно довести все три атрибута до максимума, каким-то одним придется пожертвовать. Поэтому нужно решать для себя в контексте каждого проекта, какие атрибуты являются более приоритетными. Рассмотрим пример сквозные или end-to-end тесты. Как мы помним из прошлых лекций, это",
    "chunks": [
        {
            "timestamp": [
                0.0,
                100.0
            ],
            "text": " you you you you Добро пожаловать на третий урок курса введения в юнит тестирования."
        },
        {
            "timestamp": [
                100.52,
                102.94
            ],
            "text": " На этом уроке мы поговорим о качестве тестов."
        },
        {
            "timestamp": [
                103.46,
                107.2
            ],
            "text": " Но для начала давайте вспомним, о чем же мы говорили на предыдущей лекции."
        },
        {
            "timestamp": [
                107.76,
                110.7
            ],
            "text": " На предыдущей лекции мы дали определение юнит тестам."
        },
        {
            "timestamp": [
                111.38,
                114.16
            ],
            "text": " Мы разобрались с тем, когда и где лучше их писать."
        },
        {
            "timestamp": [
                114.54,
                119.74
            ],
            "text": " Мы обсудили структуру тестов, рассмотрели существующие фреймворки для юнит тестирования,"
        },
        {
            "timestamp": [
                119.98,
                122.62
            ],
            "text": " познакомились с фреймворками семейства XUnit,"
        },
        {
            "timestamp": [
                122.96,
                128.1
            ],
            "text": " а также установили и научились пользоваться фреймворком GUnit 5 для модульного тестирования."
        },
        {
            "timestamp": [
                128.64,
                131.56
            ],
            "text": " На данном уроке мы поговорим о качестве тестов,"
        },
        {
            "timestamp": [
                132.46,
                135.72
            ],
            "text": " обсудим тестирование по принципу черного и белого ящиков,"
        },
        {
            "timestamp": [
                135.72,
                141.34
            ],
            "text": " поговорим о метриках тестов, рассмотрим инструменты для измерения покрытия тестами,"
        },
        {
            "timestamp": [
                141.88,
                147.28
            ],
            "text": " а также поговорим про разработку через тестирование и тестирование через поведение."
        },
        {
            "timestamp": [
                147.28,
                154.3
            ],
            "text": " Хорошие тесты помогают предотвратить стагнацию и сохранить темп разработки со временем. С хорошими"
        },
        {
            "timestamp": [
                154.3,
                159.44
            ],
            "text": " тестами вы будете уверены в том, что изменения функциональности не приведут к новым ошибкам."
        },
        {
            "timestamp": [
                159.44,
                166.32
            ],
            "text": " Поэтому очень важно писать качественные тесты. И сегодня на уроке мы научимся писать качественные тесты,"
        },
        {
            "timestamp": [
                166.66,
                170.22
            ],
            "text": " а также посмотрим на написание тестов несколько по другим углам,"
        },
        {
            "timestamp": [
                170.56,
                173.28
            ],
            "text": " когда будем говорить о разработке через тестирование."
        },
        {
            "timestamp": [
                173.74,
                179.62
            ],
            "text": " Как мы помним из предыдущих лекций, целью юнит-тестирования является обеспечение стабильного роста проекта."
        },
        {
            "timestamp": [
                179.62,
                184.56
            ],
            "text": " Но невозможно добиться этой цели, просто написав большое количество тестов."
        },
        {
            "timestamp": [
                184.56,
                184.88
            ],
            "text": " Но невозможно добиться этой цели, просто написав большое количество тестов."
        },
        {
            "timestamp": [
                190.44,
                190.96
            ],
            "text": " Ведь они должны учитывать критичность функционала, который мы покрываем, а также стоимость их поддержки."
        },
        {
            "timestamp": [
                192.9,
                200.36
            ],
            "text": " Давайте представим себе две ситуации. Первая ситуация. Мы работаем на крупном проекте, хотим внести изменения в существующую функциональность и запускаем тесты."
        },
        {
            "timestamp": [
                201.06,
                207.0
            ],
            "text": " Наши тесты завершаются неудачей и мы тратим несколько дней на то, чтобы разобраться с причинами падений."
        },
        {
            "timestamp": [
                207.0,
                213.0
            ],
            "text": " В результате оказывается, что наш тест был написан некорректно и это было ложное срабатывание."
        },
        {
            "timestamp": [
                213.0,
                215.0
            ],
            "text": " Как минимум это неприятно."
        },
        {
            "timestamp": [
                215.0,
                225.06
            ],
            "text": " А также давайте рассмотрим еще одну ситуацию, когда мы запускаем наши тесты, они также завершаются неудачей и мы пытаемся разобраться, что же случилось."
        },
        {
            "timestamp": [
                225.7,
                229.22
            ],
            "text": " Приходим, смотрим, и нам совершенно непонятно, что же тестирует тест,"
        },
        {
            "timestamp": [
                229.38,
                235.24
            ],
            "text": " потому что название метода непонятно, логи отсутствуют, структура теста нарушена."
        },
        {
            "timestamp": [
                235.76,
                240.38
            ],
            "text": " Все это забирает ресурсы у бизнеса, а нам, как разработчикам,"
        },
        {
            "timestamp": [
                240.46,
                246.12
            ],
            "text": " доставляет дополнительные неудобства, дополнительные нервы и так далее."
        },
        {
            "timestamp": [
                246.12,
                251.58
            ],
            "text": " На данном слайде мы видим график с двумя линиями. Красная линия показывает нам"
        },
        {
            "timestamp": [
                251.58,
                256.96
            ],
            "text": " проект без тестов, а зеленая линия проект с тестами. Как видим, проект без тестов"
        },
        {
            "timestamp": [
                256.96,
                261.0
            ],
            "text": " стартует чуть раньше, но в дальнейшем он может стагнировать или вообще"
        },
        {
            "timestamp": [
                261.0,
                267.24
            ],
            "text": " остановиться. Это происходит потому, что на начальном этапе мы не тратим никаких ресурсов на то, чтобы писать тесты, а"
        },
        {
            "timestamp": [
                267.76,
                275.24
            ],
            "text": " переходим непосредственно к реализации бизнес-логики. Со временем, когда проект растет, количество бизнес-логики"
        },
        {
            "timestamp": [
                275.68,
                281.1
            ],
            "text": " увеличивается, количество зависимости также увеличивается и становится все сложнее"
        },
        {
            "timestamp": [
                282.32,
                288.16
            ],
            "text": " обнаруживать и исправлять дефекты. В то же время проект с тестами стартует несколько позже."
        },
        {
            "timestamp": [
                288.56,
                293.16
            ],
            "text": " Это происходит потому, что на начальном этапе мы тратим время на написание самих тестов"
        },
        {
            "timestamp": [
                293.16,
                296.26
            ],
            "text": " и только потом переходим к реализации бизнес-логики."
        },
        {
            "timestamp": [
                296.26,
                301.36
            ],
            "text": " Но как видно по графику, проекты с тестами развиваются более стабильно,"
        },
        {
            "timestamp": [
                301.5,
                306.54
            ],
            "text": " просто потому что тесты обеспечивают так называемую подушку безопасности"
        },
        {
            "timestamp": [
                306.54,
                313.62
            ],
            "text": " когда мы добавляем новый функционал мы можем быть уверены в том что старый функционал не сломается"
        },
        {
            "timestamp": [
                313.62,
                320.88
            ],
            "text": " ошибки поджидают нас на каждом этапе разработки ошибки могут возникать вследствие внесения"
        },
        {
            "timestamp": [
                320.88,
                326.12
            ],
            "text": " изменений в существующую функциональность или при добавлении новой функциональности."
        },
        {
            "timestamp": [
                326.44,
                329.54
            ],
            "text": " Такие ошибки, как правило, называются регрессионными."
        },
        {
            "timestamp": [
                330.02,
                335.72
            ],
            "text": " Данное название происходит от слова «регресс», то есть это движение назад или откат."
        },
        {
            "timestamp": [
                335.86,
                340.64
            ],
            "text": " Во многих командах разработки выделяется отдельное время на регрессионное тестирование."
        },
        {
            "timestamp": [
                341.24,
                367.5
            ],
            "text": " Это некое собирательное определение всех возможных видов тестирования, которые проводятся для того, чтобы убедиться в том, что функционал, когда разработчики устраняют ранее обнаруженные"
        },
        {
            "timestamp": [
                367.5,
                373.62
            ],
            "text": " дефекты и баги, а также когда мы исправляем проблемы с производительностью. Таким образом,"
        },
        {
            "timestamp": [
                373.62,
                379.8
            ],
            "text": " мы можем говорить о том, что защита от регрессий – это первый атрибут качественного юнит-теста."
        },
        {
            "timestamp": [
                379.8,
                385.34
            ],
            "text": " Чем больше кода проверяет тест, тем выше вероятность выявить баг."
        },
        {
            "timestamp": [
                388.6,
                389.06
            ],
            "text": " Но недостаточно опираться только на такую метрику."
        },
        {
            "timestamp": [
                392.8,
                392.96
            ],
            "text": " Ведь если код не несет в себе никакой критической бизнес-логики,"
        },
        {
            "timestamp": [
                395.64,
                396.36
            ],
            "text": " а выполняет достаточно тривиальные функции,"
        },
        {
            "timestamp": [
                398.28,
                399.1
            ],
            "text": " то ценность такого теста падает."
        },
        {
            "timestamp": [
                404.68,
                405.32
            ],
            "text": " Поэтому при выборе функционала, который необходимо покрывать юнит тестами,"
        },
        {
            "timestamp": [
                408.66,
                409.18
            ],
            "text": " необходимо четко осознавать, что мы тестируем и зачем."
        },
        {
            "timestamp": [
                413.8,
                415.2
            ],
            "text": " И, как правило, выбор остается на стороне критичного бизнес-функционала. А теперь вопрос."
        },
        {
            "timestamp": [
                415.72,
                420.08
            ],
            "text": " Какие из представленных на слайде функций нужно тестировать, а какие нет?"
        },
        {
            "timestamp": [
                420.84,
                424.34
            ],
            "text": " Первое. Метод, который возвращает сегодняшнее число."
        },
        {
            "timestamp": [
                427.12,
                432.12
            ],
            "text": " Этот метод может использоваться, например например когда пользователь заходит на сайт и ему нужно подтвердить что его возраст 18 или более"
        },
        {
            "timestamp": [
                432.12,
                438.54
            ],
            "text": " лет второе метод который проверяет доступен ли данный товар для самовывоза в интернет-магазине"
        },
        {
            "timestamp": [
                438.54,
                450.0
            ],
            "text": " в конкретном городе то есть здесь мы говорим о ситу, когда пользователь зашел в интернет-магазин, выбирает город, выбирает понравившийся товар и хочет оформить доставку."
        },
        {
            "timestamp": [
                450.64,
                455.36
            ],
            "text": " Третий метод, который проверяет возможность авторизации пользователя."
        },
        {
            "timestamp": [
                455.76,
                458.88
            ],
            "text": " Точно так же можем спроецировать это на наш интернет-магазин."
        },
        {
            "timestamp": [
                459.0,
                463.94
            ],
            "text": " Допустим, что неавторизованные пользователи не могут осуществлять заказы."
        },
        {
            "timestamp": [
                464.86,
                466.1
            ],
            "text": " И четвертое это"
        },
        {
            "timestamp": [
                466.1,
                471.52
            ],
            "text": " метод который ищет пользователя из базы данных по идее например если мы хотим"
        },
        {
            "timestamp": [
                471.52,
                475.88
            ],
            "text": " позволить нашим пользователям интернет-магазина оставлять отзывы о"
        },
        {
            "timestamp": [
                475.88,
                481.88
            ],
            "text": " товаре конечно мы можем протестировать вообще все но в основном это не имеет"
        },
        {
            "timestamp": [
                481.88,
                485.04
            ],
            "text": " никакого смысла давайте же ответим на наш вопрос."
        },
        {
            "timestamp": [
                485.6,
                489.98
            ],
            "text": " Соответственно, метод, который возвращает сегодняшнее число, можно не тестировать."
        },
        {
            "timestamp": [
                489.98,
                495.1
            ],
            "text": " Это достаточно тривиальная операция и здесь можно обойтись только проверками if-else."
        },
        {
            "timestamp": [
                495.4,
                501.22
            ],
            "text": " А вот метод, который проверяет, доступен ли данный товар для самовывоза в интернет-магазине в конкретном городе,"
        },
        {
            "timestamp": [
                501.58,
                505.64
            ],
            "text": " тестировать нужно, потому что это очень важный кусок бизнес логики для"
        },
        {
            "timestamp": [
                505.64,
                512.78
            ],
            "text": " нашего интернет-магазина если он будет работать неправильно мы потеряем доход то же самое относится"
        },
        {
            "timestamp": [
                512.78,
                516.92
            ],
            "text": " и к методу который проверяет возможность авторизации пользователя как мы и сказали"
        },
        {
            "timestamp": [
                516.92,
                523.82
            ],
            "text": " ранее не авторизованные пользователи не могут осуществлять какие-либо заказы а значит если"
        },
        {
            "timestamp": [
                523.82,
                526.8
            ],
            "text": " метод будет неправильно мы также потеряем в деньгах."
        },
        {
            "timestamp": [
                527.34,
                531.92
            ],
            "text": " А вот метод, который ищет пользователя по идентификатору в базе данных,"
        },
        {
            "timestamp": [
                532.04,
                533.14
            ],
            "text": " тестировать не обязательно."
        },
        {
            "timestamp": [
                533.8,
                538.34
            ],
            "text": " Хотя бы потому, что мы делаем запрос в базу через некую прослойку JPA,"
        },
        {
            "timestamp": [
                538.74,
                541.22
            ],
            "text": " которая уже написана и протестирована до нас."
        },
        {
            "timestamp": [
                541.22,
                545.22
            ],
            "text": " Кроме того, такой запрос также является достаточно тривиальным."
        },
        {
            "timestamp": [
                545.22,
                552.94
            ],
            "text": " Резюмируя, первый атрибут качественного юнит теста это защита от регрессии. Нужно тестировать"
        },
        {
            "timestamp": [
                552.94,
                559.24
            ],
            "text": " как можно больше кода и при этом этот код должен нести какую-то важность с точки зрения бизнес"
        },
        {
            "timestamp": [
                559.24,
                575.52
            ],
            "text": " логики. Второй и третий атрибуты тесно связаны между собой. Когда мы пишем юнит-тест, мы должны задаваться вопросами, потребуются ли какие-либо изменения в нашем тесте в случае, если изменится реализация тестируемого функционала."
        },
        {
            "timestamp": [
                576.1,
                585.86
            ],
            "text": " И второй вопрос, как много ресурсов понадобится от тестировщика или разработчика, который впервые видит наш тест для того, чтобы внести изменения."
        },
        {
            "timestamp": [
                586.92,
                593.34
            ],
            "text": " Таким образом, мы приходим к тому, что второе и третье атрибуты – это устойчивость к новым изменениям"
        },
        {
            "timestamp": [
                593.34,
                600.22
            ],
            "text": " и простота поддержки. То есть устойчивость к новым изменениям определяет, насколько хорошо"
        },
        {
            "timestamp": [
                600.22,
                607.26
            ],
            "text": " тест может пережить рефакторинг тестируемого нами кода. Что такое рефакторинг? Рефакторинг"
        },
        {
            "timestamp": [
                607.26,
                614.58
            ],
            "text": " это изменение деталей имплементации без изменения наблюдаемого поведения. А простота поддержки"
        },
        {
            "timestamp": [
                614.58,
                620.7
            ],
            "text": " оценивает затраты на сопровождение кода. На слайде показано взаимодействие пользователя с"
        },
        {
            "timestamp": [
                620.7,
                626.18
            ],
            "text": " тестируемой системой. Пользователь вводит какие-то данные, система производит"
        },
        {
            "timestamp": [
                626.18,
                633.5
            ],
            "text": " необходимые вычисления, это шаг 1, шаг 2 и шаг 3 и возвращает пользователю какой-то результат."
        },
        {
            "timestamp": [
                634.06,
                640.38
            ],
            "text": " Давайте рассмотрим, как могла бы выглядеть такая схема взаимодействия на примере нашего класса"
        },
        {
            "timestamp": [
                640.38,
                645.68
            ],
            "text": " калькулятор из прошлой лекции пользователь приходит передает метод"
        },
        {
            "timestamp": [
                645.68,
                651.56
            ],
            "text": " операнды и оператор на первом шаге на втором шаге метод calculation производит"
        },
        {
            "timestamp": [
                651.56,
                657.1
            ],
            "text": " необходимые вычисления а на третьем шаге метод возвращает пользователю результат"
        },
        {
            "timestamp": [
                657.1,
                662.52
            ],
            "text": " на данном слайде мы видим пример плохого теста который неустойчив к изменениям"
        },
        {
            "timestamp": [
                662.52,
                667.82
            ],
            "text": " когда мы пишем юнит тест очень неправильно привязываться к тому,"
        },
        {
            "timestamp": [
                667.82,
                673.26
            ],
            "text": " как реализован метод, вместо того, чтобы проверять ожидаемый результат. Конечно,"
        },
        {
            "timestamp": [
                673.26,
                678.66
            ],
            "text": " наш метод очень сложно протестировать неправильно, ведь там всего одна функция"
        },
        {
            "timestamp": [
                678.66,
                685.38
            ],
            "text": " calculation. Рассмотрим еще один пример неудачного теста, привязанного к реализации метода."
        },
        {
            "timestamp": [
                696.34,
                696.72
            ],
            "text": " В данном тесте мы вычитываем содержимое класса калькулятор и пытаемся сравнить его с некой строкой, в которой мы описали ожидаемое содержимое нашего класса."
        },
        {
            "timestamp": [
                704.32,
                705.08
            ],
            "text": " Такой тест очень неустойчив к изменениям, потому что при малейших доработках в нашем классе он будет завершаться с ошибкой."
        },
        {
            "timestamp": [
                709.94,
                710.48
            ],
            "text": " На данном слайде мы видим пример правильно спроектированного теста."
        },
        {
            "timestamp": [
                715.1,
                718.36
            ],
            "text": " Хороший тест не должен основываться на внутренней реализации метода, а должен лишь проверять ожидаемый результат."
        },
        {
            "timestamp": [
                718.86,
                721.18
            ],
            "text": " Это как раз то, что интересно пользователю."
        },
        {
            "timestamp": [
                721.64,
                726.06
            ],
            "text": " И в случае, если в методе что-то произойдет не так мы получим неверный результат"
        },
        {
            "timestamp": [
                726.06,
                734.34
            ],
            "text": " и это будет сигналом о том что образовался дефект тест должен проверять результаты работы они то как"
        },
        {
            "timestamp": [
                734.34,
                739.92
            ],
            "text": " этот результат достигается конечно такой тест не идеален потому что в систему все еще можно"
        },
        {
            "timestamp": [
                739.92,
                745.82
            ],
            "text": " внести изменения которые могут нарушить его работу. Например, можно добавить дополнительный"
        },
        {
            "timestamp": [
                745.82,
                752.54
            ],
            "text": " шаг или изменить возвращаемый результат. На примере нашего метода Calculation можно представить,"
        },
        {
            "timestamp": [
                752.54,
                758.0
            ],
            "text": " что в какой-то момент мы решили передавать параметры не отдельно, а вместе, одной строкой."
        },
        {
            "timestamp": [
                758.0,
                768.0
            ],
            "text": " Таким образом, это также будет ложное срабатывание, ведь мы не изменили логику вычислений. Но при этом стоит заметить, что такой тест все еще достаточно"
        },
        {
            "timestamp": [
                768.0,
                769.82
            ],
            "text": " легко отрефакторить."
        },
        {
            "timestamp": [
                769.82,
                773.0
            ],
            "text": " Для этого необходимо всего лишь следовать рекомендациям"
        },
        {
            "timestamp": [
                773.0,
                775.08
            ],
            "text": " нашей среды разработки."
        },
        {
            "timestamp": [
                775.08,
                776.72
            ],
            "text": " Теперь собираем все вместе."
        },
        {
            "timestamp": [
                776.72,
                780.6
            ],
            "text": " В данный момент мы обсудили уже три атрибута качественного"
        },
        {
            "timestamp": [
                780.6,
                781.6
            ],
            "text": " юнит-теста."
        },
        {
            "timestamp": [
                781.6,
                783.62
            ],
            "text": " Первый – это защита от регрессий."
        },
        {
            "timestamp": [
                783.62,
                785.16
            ],
            "text": " Второй – устойчивость к новым"
        },
        {
            "timestamp": [
                785.16,
                792.28
            ],
            "text": " изменениям и третий – простота поддержки. Перейдем к четвертому атрибуту. Четвертый атрибут – это"
        },
        {
            "timestamp": [
                792.28,
                799.08
            ],
            "text": " быстрая обратная связь. В идеальном случае тесты должны предупреждать нас об ошибках сразу же"
        },
        {
            "timestamp": [
                799.08,
                806.72
            ],
            "text": " после внесения изменения в функциональность. В таком случае затраты на исправление дефектов сводятся практически до нуля."
        },
        {
            "timestamp": [
                806.72,
                813.86
            ],
            "text": " Если тесты будут выполняться медленно, их не будут поддерживать и это отобьет всяческую охоту у"
        },
        {
            "timestamp": [
                813.86,
                819.32
            ],
            "text": " разработчика запускать их как можно чаще. Для того чтобы тесты выполнялись быстро,"
        },
        {
            "timestamp": [
                819.32,
                825.96
            ],
            "text": " они должны быть первое небольшими и второе должны быть изолированы от каких-то"
        },
        {
            "timestamp": [
                825.96,
                827.7
            ],
            "text": " других зависимостей."
        },
        {
            "timestamp": [
                827.7,
                831.66
            ],
            "text": " Итак, четыре атрибута хороших юнит тестов."
        },
        {
            "timestamp": [
                831.66,
                837.0
            ],
            "text": " защита от регрессий, устойчивость к новым изменениям,"
        },
        {
            "timestamp": [
                837.0,
                841.48
            ],
            "text": " простота поддержки и быстрая обратная связь."
        },
        {
            "timestamp": [
                841.48,
                844.48
            ],
            "text": " Все эти атрибуты применимы не только к юнит тестам,"
        },
        {
            "timestamp": [
                844.48,
                846.48
            ],
            "text": " могут применяться также и к другим видам"
        },
        {
            "timestamp": [
                846.48,
                852.72
            ],
            "text": " тестов например к интеграционным к сожалению не существует какой-то утилиты в которую можно было"
        },
        {
            "timestamp": [
                852.72,
                860.44
            ],
            "text": " бы просто передать тест и она выдала бы нам оценку качества нашего теста но при этом чисто логически"
        },
        {
            "timestamp": [
                860.44,
                865.5
            ],
            "text": " можно оценить качество наших тестов по каждому из этих атрибутов"
        },
        {
            "timestamp": [
                871.14,
                871.82
            ],
            "text": " чтобы тест был эффективным он должен демонстрировать результативность в каждой из четырех категорий"
        },
        {
            "timestamp": [
                874.2,
                875.42
            ],
            "text": " но к сожалению все эти категории"
        },
        {
            "timestamp": [
                877.9,
                878.78
            ],
            "text": " взаимоисключающие поэтому такой тест создать невозможно"
        },
        {
            "timestamp": [
                887.18,
                891.36
            ],
            "text": " четвертый атрибут простота поддержки не сильно связан с остальными тремя, за исключением сквозных end-to-end тестов. Поэтому будем рассматривать его совместно с атрибутом"
        },
        {
            "timestamp": [
                891.36,
                893.62
            ],
            "text": " «Устойчивость к новым изменениям»."
        },
        {
            "timestamp": [
                893.62,
                896.7
            ],
            "text": " Таким образом, невозможно довести все три атрибута"
        },
        {
            "timestamp": [
                896.7,
                900.9
            ],
            "text": " до максимума, каким-то одним придется пожертвовать."
        },
        {
            "timestamp": [
                900.9,
                903.88
            ],
            "text": " Поэтому нужно решать для себя в контексте каждого"
        },
        {
            "timestamp": [
                903.88,
                907.0
            ],
            "text": " проекта, какие атрибуты являются более приоритетными."
        },
        {
            "timestamp": [
                907.0,
                914.48
            ],
            "text": " Рассмотрим пример сквозные или end-to-end тесты. Как мы помним из прошлых лекций, это"
        }
    ]
}