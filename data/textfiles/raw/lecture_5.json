{
    "text": " you you you you Дорогие друзья, рад вас приветствовать на курсе знакомства с языками программирования. Сегодня у нас вводная лекция. Мы поговорим о языках программирования в целом, о языке программирования C-Sharp, об алгоритмах, а также порешаем задачи. Друзья, цель этого курса – познакомить вас с синтаксисом языка программирования высокого уровня, дать представление о подходах к написанию базовых алгоритмов, а также дать представление о подходах к написанию качественного кода. Друзья, перед тем как продолжить и познакомиться с программой настоящего курса, а также с планом работ на сегодня, предлагаю познакомиться и я расскажу немного о себе. Меня зовут Черняев Денис. В компании Geekbrains я работаю уже более года. До прихода в компанию я работал частным преподавателем на порталах дистанционного обучения. Среди преподаваемых предметов я могу выделить языки программирования C, C++, C Sharp, Python. Также могу выделить тематику алгоритмы и структуры данных, операционные системы и компьютерные сети. Друзья, преподавание для меня не является основной работой, это по большей части хобби. Основная моя деятельность это разработка сетевого программного обеспечения, служб Windows, а также построение вычислительных систем на базе оборудования Cisco и операционных систем Linux. Итак, друзья, предлагаю ознакомиться с планом настоящего курса, который состоит из шести лекций и восьми семинарских занятий. Сегодня у нас вводная лекция, мы будем говорить о языке C-Sharp, о его основных особенностях, а также решать первые свои задачи. Вторая лекция у нас будет посвящена массивам, на третьей лекции мы будем говорить о функциях, о их составляющих частях и о том, как их применять в наших программах. Четвертая, пятая и шестая лекция затронут такие тематики, как правила написания хорошего кода, двумерные массивы, а также такой подход к написанию алгоритмов, как рекурсия. Итак, план работы на сегодня у нас следующий. Поговорим о том, почему же C-Sharp был выбран инструментом для решения задач на текущем курсе. Настроим редактор Visual Studio Code. Вспомним основные понятия из курса ведения программирования и приступим к написанию наших первых программ. Друзья, я думаю, при просмотре программы текущего курса многие из вас задались вопросом, а почему именно C-Sharp выбран в качестве основного инструмента для решения задач. В команде Geekbrains было рассмотрено несколько языков программирования, представленных на экране, и я могу сказать следующее, то что на текущем уровков программирования, представленных на экране. И я могу сказать следующее. То, что на текущем уровне программирования, на текущем уровне написания кода, программы, написанные на любом языке программирования, из представленных будут выглядеть примерно одинаково. И написав программу на любом из представленных языков, вы без труда сможете перенести ее на любой другой понравившийся вам язык. Давайте рассмотрим критерии, по которым язык программирования C-Sharp был выбран в качестве основного инструмента для решения задач на текущем курсе. Друзья, на экране вы можете видеть три фрагмента исходного кода, в котором создаются три переменные с разными типами данных. Обратите внимание, то что в языках Python и JavaScript тип данных не указывается. В языке C-Sharp требуется явного указания типа данных при создании переменной. Друзья, дело в том, что язык C-Sharp имеет статическую типизацию, то есть он требует явного указания типа данных при ее создании. На самом деле это требование можно обойти, однако на начальных этапах разработки программ я это делать не рекомендую. Преимущество статической типизации заключается в следующем. На каждом этапе выполнения программы, на каждом этапе написания ее кода вы видите и понимаете, какой тип данных у вас имеет каждая из переменных. Кроме того, друзья, я отмечу, что переходить с разработки на языке с динамической типизации на язык со статической типизации значительно сложнее, чем наоборот. Например, разработчику на языках C, C++ или Java значительно проще перейти на разработку на языке Python или, например, PHP, нежели чем в обратном направлении. Отмечу, что статическую типизацию также имеют языки C, C++, Java. Давайте рассмотрим второе свойство, которое выделяет язык C-sharp среди этих языков. На экране представлены три фрагмента исходного кода, на которых выводится на экран приветственное сообщение Hello World. Друзья, обратите внимание на наличие дополнительных кодовых конструкций в языках C++ и Java. Кому знакомы ключевые слова class или main, предлагаю написать об этом сообщением в чат. На начальных этапах при решении алгоритмических задач нас явно будут отвлекать такие конструкции, как классы, точки входа в приложение, пространство имен от написания алгоритмов. точки входа в приложение, пространство имен, от написания алгоритмов. В языке C-Sharp можно воспользоваться режимом, который позволяет писать простые программы, не перегружая их сложным синтексисом. То есть все необходимые конструкции, в частности, которые вы видите на экране у языков C++, Java, компилятор C-Sharp будет поставлять автоматически, а мы сможем сконцентрироваться на решении алгоритмических задач, будь то связанных с циклами, будь то светлениями, будь то с арифметикой. Другими словами, язык C-Sharp позволяет писать код точно так же, как и на языке Python, но используя все плюсы статической типизации. Да, если вдруг часть слов, которые я сказал, была вам непонят, или же вы слышите их впервые, можете не переживать. Друзья, поверьте на слово, что язык C-Sharp – это отличный выбор для старта программирования, решения алгоритмических задач и полученные навыки вы сможете легко перенести на любой другой понравившийся вам язык. Друзья, обращаю ваше внимание, что целью настоящего курса не является изучение синтеза языка C-Sharp, его продвинутых возможностей и функционалов. Целью настоящего курса является получение навыков решения алгоритмов различных уровней сложности, а также изучение лучших практик при их построении. И C-Sharp нам в этом деле понадобится как инструмент создания программ. Для использования любого языка программирования нам потребуется создать и настроить для него окружение. Для языка программирования C-Sharp это платформа.NET. Для удобства написания кода мы будем использовать редактор Visual Studio Code и систему контроля версии Git, которые, скорее всего, у вас уже настроены на предыдущем курсе. Если же нет, то инструкцию по ним я продублирую в описании к лекции. Друзья, отмечу, что наиболее приоритетный вариант настройки и установки окружения – это его самостоятельное развертывание. Однако, если у вас возникнут сложности при настройке окружения, можно воспользоваться альтернативным вариантом. Заключается он в использовании облачного сервиса, который предоставляет вам удаленный рабочий стол с уже установленными и настроенными, редактором Visual Studio Code, системой контроля версии Git, а также с платформой.NET. Этим сервисом можно воспользоваться в случае, если, например, ваше оборудование не позволяет установить необходимое программное обеспечение. Работа с этим сервисом можно напрямую из браузера. Инструкции по работе с этим облачным средством будут продублированы к описанию под лекции. Для установки и настройки платформы.NET нам потребуется проделать следующие шаги. Перейдем на страницу загрузки установщика для платформы.NET. Выберем необходимую для нас архитектуру. Это может быть либо Linux подобной операционной системы, либо Mac или Windows. И далее нам необходимо будет выбрать разрядность. Друзья, в большинстве случаев это будет 64-разрядный установочный файл, который необходимо загрузить и установить следуя инструкциям установочника. Далее нам требуется настроить расширение для удобства разработки в Visual Studio Code. Следующим шагом для настройки Visual Studio Code под разработку на C-Sharp откроем среду разработки и перейдем в соответствующую вкладку с установкой расширений. Друзья, нам понадобится буквально одно расширение, которое называется C-Sharp для Visual Studio Code. Введем первую часть названия в поиске C-Sharp и выберем первые предложенные в списке расширения. Обратите внимание на производителя, на поставщика этого расширения, Microsoft, а также на количество скачиваний, чтобы убедиться, что это действительно оригинальное расширение. Для установки необходимо нажать кнопку Install. У меня такой кнопки нет, поскольку данное расширение у меня уже установлено. Итак, друзья, на этом установка и настройка окружения для языка C-Sharp закончена. На данном этапе мы готовы к написанию наших первых программ на языке C-Sharp. В качестве первой программы предлагаю реализовать вывод приездного сообщения на экран Hello World. О такой программе вы наверняка уже слышали. Обычно ее используют для того, чтобы понять, а правильно ли настроено наше окружение. Итак, перейдем в редактор Visual Studio Code. Вести разработку мы сегодня будем в каталоге Lesson1. И давайте создадим в нем подкаталог Task1, в котором мы будем создавать первый проект. Итак, создавать каталоги мы можем с помощью команды mkdir от английского make directory создать директорию передаем в качестве параметра ей имя требуемого каталога данном случае task 1 и не забудем в него перейти командой cd от английского change directory. Итак, друзья, для создания проекта на языке C-sharp мы используем команду.NET new console. Обращаю ваше внимание, что запускать ее нужно в том каталоге, в котором вы хотите создать необходимые файлы проекта. Команда.NET-new-console создаст файл с исходным кодом program.cs, а также файл с расширением C-sharp project, который и отвечает за настройку текущего проекта. Итак, друзья, перейдем в файл program.cs, удалим код, который сгенерировался автоматически, и напишем его самостоятельно. Для вывода информации на консоль в языке C-Sharp мы используем модуль консоль. Этот модуль нам предоставляет метод writeLine, который и осуществляет вывод сообщений, либо же значений переменных, либо какой-либо другой информации на экран. Давайте выведем сообщение, приветственное Hello World. Друзья, не забываем в конце ставить точку запятой, для того, чтобы компилятор понимал что на этом инструкция заканчивается. запятой это признак конца инструкции и переход к следующей итак запустим наш код с помощью команды. net.ru обращаю внимание что эта команда нужно выполнять в каталоге, в котором проект был создан. То есть у нас это каталог Task1. Компиляция исходного кода может занимать некоторое время. Итак, на экране мы видим приездное сообщение, что говорит о правильной работе программы. Друзья, не забываем сохранить наши наработки в репозитории Git. Для этого перейдем на один каталог повыше и выполним оттуда команду git add и проиндексируем целиком наш созданный каталог. Task 1. Создадим commit с указанием комментария. Допустим, назовем его урок 1 перед этим указав действия да то что мы добавили новый проект урок 1 ну и допустим task 1 после чего отправим наши наработки на удаленной репозитории с помощью команды git push origin-main. Отмечу, что каталог вашего локального репозитория, в моем случае это 0.1, нижнее подчеркивание C-sharp, должен содержать файл gitignore, в котором приведены инструкции для того, чтобы git не отправлял на удаленный репозиторий файлы, в которых нет необходимости. Это различные бинарные файлы, временные и прочие. Именно этот файл позволяет это предупредить. Итак, друзья, наше окружение настроено и проверено. Прежде чем приступить к решению задач, давайте вспомним базовые термины из курса «Ведение в программирование». Рассмотрим две группы терминов. Первая группа – это переменные, типы данных и арифметика. Вторая группа терминов – это виды алгоритмических конструкций. Итак, первый термин – это переменные. Под переменной мы обычно понимаем некоторую область памяти, которая предназначена для хранения значений определенного типа. Переменной можно также дать и более простое определение, например, назвать ее некоторым контейнером для хранения определенных значений. Эти значения могут быть целочисленными, строковыми, а также хранить в себе и более сложные объекты. Переменная имеет некоторую характеристику, которую мы называем типом данных. Тип данных нам говорит о том, какого рода значения могут храниться в этой переменной. Например, тип данных может быть целочисленный, строковый, вещественные числа, а также и более сложные объекты. Друзья, важное понятие для тех, кто только знакомится с программированием, это арифметика или же арифметические операции. Среди них можно выделить простые, такие как сложение, вычитание, умножение, деление. А также есть и более сложные, например, деление с остатком, возведение в степень или же извлечение квадратного корня. Все эти операции мы будем использовать в решении задач на текущем курсе. Вторая группа терминов описывает виды алгоритмов. Напомню, линейный алгоритм подразумевает последовательное выполнение инструкций без изменения их порядка следования. Условный алгоритм подразумевает разветвление алгоритма на две и более ветвей в зависимости от некоторого условия. Ну и третий вид алгоритма – это циклический. Циклический алгоритм подразумевает повторение либо одинаковых действий, либо похожих. Также для циклических алгоритмов мы используем некоторые условия, которые позволяют ограничить количество этих повторений. Или же, другими словами, итераций. Итак, друзья, мы настроили окружение, вспомнили базовые термины. Давайте приступим к знакомству с языком программирования и приступим к решению первых задач. Начать предлагаю с базовых вещей, с создания переменных и арифметических операций над ними. Итак, рассмотрим первый пример. В нем требуется объявить переменную, задать ей начальное значение и вывести его на экран. Перед тем, как начать писать код, давайте посмотрим, а как в языке программирования C-Sharp создаются переменные. Создание переменной в языке C-Sharp, а также и в большинстве других языков со статической типизацией, состоит из трех основных этапов. Первый этап – это указание типа данных для значения, которое в этой переменной будет храниться. Второй этап – это указание непосредственно имени переменной или же ее называют идентификатор. На идентификатор накладываются ограничения. Оно не должно начинаться с цифр, должно состоять из латинских букв, а также может начинаться с символа подчеркивания. И важное ограничение, которое накладывается на именование переменных, это то, что оно не должно совпадать с зарезервированными ключевыми словами языка C-Sharp. Ну и третий этап это инициализация, то есть присвоение переменной определенного значения. В данном случае мы присваиваем конкретное значение в виде целого числа равного 100. Давайте запрограммируем этот пример на языке C-sharp. Итак, перейдем в редактор Visual Studio Code и давайте дополним наш первый проект. Укажем тип данальное значение, допустим, 100. Друзья, для того, чтобы проверить, правильно ли у нас проинциализирована переменная, проинциализирована ли она вообще, давайте выведем ее значение на экран. Воспользуемся все тем же модулем в консоли и методом writeLine. Напомню, он может выводить на экран как сообщения, так и значения переменных. Для этого в круглых скобках мы укажем имя переменной и не забываем поставить точку запятой как признак конца инструкции. Перейдем в каталог task1 и выполним там программу на запуск нашего проекта task1. Итак, на экране мы видим приветственное сообщение hello world, которое мы оставили, а также значение переменной value, которую мы только что создали. Друзья, давайте закомментируем первую строчку программы в консоли в WriteLine с помощью двух слэшей. Комментарии мы используем для отключения каких-либо строк кода, а также мы их используем для того, чтобы дать пояснение к какому-либо участку программы. Проверим работоспособность нашего кода еще раз. Ожидаем увидеть на экране только вывод значения переменной value, что подтверждается выводом. Друзья, мы создали целочисленную переменную, проинициализировали ее некоторым значением и вывели на экран. Но что если нам понадобится создать значения, которые хранят дробную часть? В данном случае нам понадобится использовать другие типы данных. Давайте посмотрим, какие типы данных существуют в языке C-Sharp. С первым типом данных мы уже познакомились. Его также называют целочисленным типом данных. Другой целочисленный тип данных носит название long. Его отличие от типа данных int заключается в том, что он позволяет хранить числа большего размера, нежели чем тип данных int. То есть, Long позволяет сохранить большее повеличение числа, чем тип данных int. Второй из представленных типов данных – это вещественный тип. Он позволяет хранить дробные числа. Существует две его разновидности – это типы данных float и double. Отличаются они размером. Тип данных может сохранить большую дробную часть по сравнению, чем тип данных float. Символьный тип данных используется для хранения отдельных символов. Будь то символы латинского алфавита, будь то цифры, будь то специальные символы. Ну и последний в списке – это логический тип данных. Этот тип данных позволяет сохранить всего лишь два значения. Либо логическую истину – true, либо же логически ложное значение – false. Друзья, его мы будем часто использовать в наших условных конструкциях и при создании циклов. Давайте расширим нашу программу и добавим в нее переменные рассмотренных типов данных. Итак, вернемся к проекту task1 и добавим туда новые переменные. Создадим переменную с вещественным типом данных double, назовем ее, например, d и присвоим ей некоторое значение с дробной частью, например, 5,55. Далее мы с вами создадим переменную типа данных char от английского character, то есть символный тип данных. Назовем ее, например, c и поместим туда значение, например, специальный символ восклицательного знака. Друзья, обращаю внимание, что переменная типа char, ее значения хранятся в одинарных кавычках, в отличие от строк, которые мы выводили на экран ранее. То есть символ и тип данных предполагает хранение одиночных символов. Ну и третья переменная логического типа. Назовем ее, например, b и присвоим ей значение логической истинности. Выведем значение трех переменных на экран. Все так же воспользуемся методом консоли в WriteLine. Для ускорения разработки эту строку можно скопировать, заменив только имена переменных, которые мы выводим на экран. Итак, проверим работоспособность нашей программы Запустим ее, ожидаем увидеть значение четырех переменных Что подтверждается выводом на экране Сохраним наши наработки в репозитории git Для этого проиндексируем файл с исходным кодом program.cs командой git add командой git commit создадим commit И давайте дадим ему комментарий, что были добавлены несколько перемен. А также укажем расположение этого проекта. И отправим наши наработки на удаленный репозиторий командой git push итак друзья рассмотрим второй пример в котором требуется создать целочисленные и вещественные переменные а затем применить к ним базовые арифметические операции, после чего вывести результаты на экран. Создадим для второго примера новый каталог. Назовем его task2. И создадим в каталоге task2 проект с помощью команды.NET New Console. Перейдем в файл со сходным кодом. Удалим код, который создан по умолчанию и давайте создадим парочку целочисленных переменных согласно заданию. Итак, создадим первую целочисленную переменную, назовем ее, например, i1, дадим ей значение, допустим, 5, создадим вторую переменную с названием допустим i2 и проинициализируем ее значением 6. Вычислим сумму двух созданных переменных. Для суммирования мы используем оператор плюс и давайте поместим результат сложения двух этих переменных в новую переменную с именем, например, sam. Друзья, обращаю внимание, что в этом случае я уже даю более осмысленное имя переменной, чтобы код был более читаемым. Здесь возникает вопрос, а какой тип данных будет у переменной sam? Давайте остановимся на этом вопросе чуть подробнее. Друзья, сложение – это бинарная операция, то есть в ней принимает участие два операнта. В данном случае в ней принимает участие первое слагаемое слева от плюса и второе справа от него. Дело в том, что тип данных у этой операции сложения будет формироваться на основе типа данных оперантов – первого операнта и второго. И тут возникает важный вопрос, а каким образом он будет формироваться? Друзья, для того чтобы дать ответ на этот вопрос, давайте сформулируем два правила. Если типы данных у операндов совпадают, то в этом случае тип данных у результата будет совпадать с типом данных этих операндов. В нашем случае операнды i1 и i2 имеют тип данных int, поэтому тип данных у переменной sum, то есть у результата этого сложения, будет также int, то есть она будет целочисленная. Итак, выведем результат сложения на экран с помощью команды консоли в WriteLine. Проверим правильность работы программы и запустим ее. 1.5 mm На экране мы видим сообщение Hello World. Друзья, дело в том, что после каждого изменения исходного кода его нужно сохранить. Сделать это можно с помощью горячей комбинации клавиш Ctrl-S. Сохраним изменения в исходном коде и выполним команду еще раз. Как и ожидалось, на экране мы видим результат сложения двух чисел. Но что если типы данных у операндов, которые участвуют в бинарной операции, будут разные? Давайте посмотрим на этот пример Итак, создадим еще одну переменную Дадим ей тип данных, например, long и имя, допустим, l1 Поместим туда некоторое значение, пускай это будет 6 И давайте таким же образом вычислим сумму переменных l1 и i1, то есть сумму переменной типа long и сумму переменной с типом int. И поместим результат в переменную sum2, поскольку имя sum уже занято. Здесь возникает вопрос, а какой тип данных будет иметь переменная SAM2? Друзья, давайте сформулируем второе правило. Если типы данных у операндов, которые участвуют в бинарной операции, разные, то в этом случае тип данных у результата будет формироваться как наиболее объемный или наиболее вместительный тип. Другими словами, если участвуют типы данных в операции long и int, то тип данных у результата будет long, поскольку диапазон значений у типа данных long значительно шире, в разы больше, нежели чем у int. Или другой пример. Если в операции участвуют операнды с типами int и double, то тип данных у результата операции будет double, поскольку double хранит как целые числа, так и числа с плавающей точкой. То есть этот тип данных является более вместительным и более объемным. Итак, в нашем примере участвуют операнды с типами данных long и int. long int. Согласно второму правилу, результат бинарной операции будет иметь наиболее вместительный тип, то есть long. С помощью модуля консолей и метода writeLine выведем результат на экран и проверим работоспособность нашей программы. Не забудем сохранить файл со сходным кодом горячей комбинации клавиш Ctrl-S и запустим наш проект. На экране мы видим результат вычисления первой операции и второй. И давайте такую же операцию проделаем с типами данных int и double. Переменная int у нас уже есть, это переменная i1. Создадим переменную double, назовем ее допустим d1 и присвоим ей некоторое значение, пускай это будет 5,5. Вычислим сумму этих переменных d1 плюс i1 и поместим ее в переменную sum, допустим назовем 3, поскольку sum2 уже была занята. Итак, друзья, согласно второму правилу формирования типа данных у результата этой операции, типом данных у переменной sum3 будет именно double, поскольку он является более объемным и более вместительным, если выбирать из двух double и int. Точно так же пишем тип double. Итак, проделаем такие же шаги, только с операцией умножения. Для операции умножения мы используем оператор звездочка, перемножим сначала целочисленные переменные. Согласно первому правилу результат будет иметь тип данных int. Давайте назовем его product1 от английского умножения. Давайте назовем его product1, что в переводе с английского произведение. Перемножим две переменные i1, i2. Далее перемножим переменные типов данных long, int. И результат поместим в тип данных, который более объемный и более вместительный. l1 умножить на переменную i1. Результат поместим в переменную product2 и третье умножение это с участием переменных double и переменной int. Здесь, согласно второму правилу, у результата этой операции будет тип double как наиболее вместительный. Переменную назовем, допустим, product3 и поместим туда произведение целочисленной переменной на переменную типа double. Итак, друзья, выведем наши ответы на экран, чтобы убедиться в их правильности. Для ускорения разработки некоторые фрагменты кода можно копировать. Главное следить за отсутствием Итак, сохраним файл с исходным кодом, запустим наш проект. На экране мы видим 5 результатов наших арифметических операций. Сохраним наши наработки в репозитории git, перейдем на один каталог повыше, проиндексируем наш каталог task2 целиком командой git add, создадим соответствующий commit и отправим его на удаленный репозиторий. Рассмотрим операцию деления. При делении переменных тип данных у результата операции формируется по таким же правилам, как и в операциях сложения и умножения. Давайте посмотрим, как это работает и какие нюансы при этом могут возникать. При делении переменных правило формирования типа данных у результата работает точно так же. Однако при делении целых чисел результат может получаться иногда дробным. Давайте рассмотрим этот случай. Итак, разделим переменную i1 на переменную i2. Разделим переменную i1 на переменную i2. Результат поместим в переменную quotient, что в переводе с английского означает «частный». Согласно первому правилу формирования типа данных у результата бинарной операции, здесь мы пишем тип данных int, целое число. Давайте посмотрим, какой результат мы получим и выведем его на экран. Выводим на экран значение переменной quotient, сохраняем файл с исходным кодом и запускаем наш проект командой dotnet run. Итак, друзья, на экране мы видим значение 0, однако ожидали увидеть значение 5 шестых, что примерно равно 0,8. А как вы думаете, почему так произошло? Друзья, на самом деле, какой-то магии или странности здесь нет. Целый тип данных не предполагает хранение дробной части. В определении целых чисел у нас получается дробная часть, которая в нем сохранена быть не может. Возникает вопрос, а как в этом случае нам сохранить эту дробную часть? Ответ кроется в типе данных у результата операции деления. Если он будет вещественный, то это позволит сохранить в нем дробную часть. Для этого необходимо, чтобы хотя бы один из операндов имел вещественный тип. Согласно второму правилу, в этом случае у результата операции тип данных будет вещественный тип, и это позволит в нем сохранить дробную часть. Воспользуемся ранее созданной переменной d1. Для удобства проверки присвоим ей некоторое значение, например, 6, и поделим переменную i1, которая имеет целый тип, на переменную d1, которая имеет тип данных double. Согласно второму правилу тип данных у результата этого деления будет double. Ну и создадим переменную стип. Согласно второму правилу, результат у этой операции будет double. Дадим имя переменной, допустим, caution2. И выведем результат на экран. Сохраним изменения в файле и запустим проект команды.NET RAN. Ожидаем увидеть число, равное 0,8, что подтверждается выводом. Друзья, эти примеры могут показаться достаточно сложными, но я рекомендую поэкспериментировать с ними и запустить их на своих данных. Эта тематика достаточно важная с точки зрения понимания взаимодействия различных типов данных в языке C-Sharp. Также еще один важный момент. Не стоит думать, что в языках программирования Python, Perl, PHP, JavaScript эти особенности формирования типа данных у результатов операции отсутствуют. Напротив, они присутствуют там в полной мере, только скрыты от разработчика. Язык программирования C-Sharp позволяет нам с ними познакомиться и понять, как они устроены под капотом. Итак, сохраним наши наработки в репозитории git. Для этого перейдем на один каталог повыше и командой git add проиндексируем весь каталог task2. Далее командой git commit сформируем commit с соответствующим комментариям и отправим наработки на удаленной репозитории. Друзья, для закрепления полученных навыков я даю вам домашнее задание, в котором требуется вычислить значение некоторой формулы, по сути она является дробью, числитель которой является произведением двух целых чисел, знаменатели вы можете видеть, их сумму. Друзья, обратите внимание на нюансы и особенности, которые могут возникать при делении целых чисел. Друзья, давайте вспомним задачу из курса «Введение в программирование», где нужно было найти вес самой тяжелой гири. Напомню, на вход в эту задачу поступало 5 гирь с различными весами и требовалось определить, какая гиря самая тяжелая и вывести ее вес. Перед тем как решать эту задачу, давайте решим несколько упрощенный вариант, когда гирь всего две и требуется найти вес также наиболее тяжелой гири. Если приводить аналогию с целыми числами, то задача может быть сформулирована следующим образом. Дано два целых числа и вывести на экран из них наибольшее из них. Перед тем как приступать к написанию кода, давайте выделим основные этапы в решении этой задачи и построим ее блок-схему. Первым делом нам понадобится создание двух переменных, которые будут хранить веса этих гирь. Можно назвать их, например, а и b. Следующим шагом нам необходимо будет сравнить эти две переменные, какая из них больше. В случае, если первая переменная превышает вторую, то мы просто выведем на экран эту переменную a. Иначе, если же это не так, то мы выведем на экран значение второй переменной. Друзья, какие еще способы представления алгоритмов вам известны? Совершенно верно, если вы вспомнили про представление алгоритмов в виде блок-схемы или же псевдокода. Итак, давайте построим блок-схему для этой задачи. Итак, давайте посмотрим, как может выглядеть блок-схема для решения этой задачи. Первое. Ввод переменных А и В. Для ввода мы используем блок-параллелограмм, то есть ввод-вывод данных. Далее у нас идет условие, в котором мы проверяем верно ли что переменная a превышает значение переменной b. Изображаем это в блоке ромб и далее в зависимости от результата этого сравнения мы можем идти по одной из двух веток. Либо это ветка yes вывод значения переменной а на экран, либо вторая ветка no это вывод на экран переменной B. Итак, после словесного описания алгоритма и построения его блок-схемы, давайте оживим его на языке C sharp. Перейдем в редактор Visual Studio Code. В каталоге Lesson1 создадим каталог Task3 и создадим в этом каталоге проект командой.NET New Console, предварительно в него перейдя. Перейдем в файл со сходным кодом, удалим код по ум умолчанию и согласно нашей схеме давайте создадим две целочисленные переменные. Назовем ее переменная a. Допустим, пускай будет равна 5. Вторую переменную назовем b. Пускай она будет равна 7. И теперь, друзья, нам нужно их сравнить. Для выполнения операции сравнения в подавляющем большинстве языков программирования используется оператор if. В языке C-sharp после оператора if мы указываем условие, помещая его в круглые скобочки. Условием у нас будет выражение, на которое мы можем дать ответ. Либо логическая истина, либо логический ложный ответ. Далее нам требуется сравнить две переменные a и b на предмет того, какая из них больше. Для сравнения переменных или каких-либо других проверок в большинстве языков программирования используется оператор if. Далее в фуглскопах мы указываем условие, то есть выражение, которое отвечает на вопрос верно ли что. Переменная а больше чем b. То есть условие это выражение логического типа, которое имеет только два возможных ответа. True или False. Истина или ложь. Далее, в фигурных скобках после конструкции if и после самого условия мы указываем код, который будет выполнен, если это условие верно. В данном случае мы просто выводим на экран переменную a согласно блок-схеме с помощью модуля консоли и метода brightline. В противном случае, если же это выражение неверно, то есть b у нас либо равно a, либо его превысило, мы код, который соответствует этой ветви выполнения, размещаем после ключевого слова else. Помещаем его также в фигурных скобках. В этом случае мы напишем, что переменная b будет выведена на экран. Другими словами, если a превышает значение переменной b и это верно, то мы выводим значение переменной a. В противном случае мы выводим значение переменной b. Давайте проверим и запустим проект с помощью команды.NET RUN На экране мы видим значение 7, что соответствует правильной работе алгоритма Друзья, этот алгоритм и другие, которые мы будем разрабатывать, я рекомендую проверять на разных значениях входных переменных. То есть, таким образом вы проверите работу вашего алгоритма при различных входных условиях. Применительно к нашему случаю можно поменять местами. То есть, в А поместить переменную заранее большего значения по величине нежели чем переменную b и также проверить правильность работы запустим наш проект на экране видим значение переменной а что говорит о правильной работе логарифм итак друзья сохраним наши наработки в репозитории git. Для этого целиком проиндексируем проект каталог task3. Сформируем соответствующий commit. и отправим его на удаленный репозиторий. Друзья, вопрос на засыпку для знатоков системы контроля версии Git. А почему я использую ключевое слово main, а не master? Кто знает, какая в этом разница? Свои предположения можете написать в комментариях под трансляцией. Итак, давайте рассмотрим эту же задачу, только с 5 гирями. Если приводить аналогию с набором чисел, то эта задача может быть формулирована следующим образом. Дан набор из пяти чисел и нужно определить большее из них. Перед тем, как приступить к написанию кода, давайте вспомним алгоритм, который был предложен на лекции. Итак, для нахождения максимального из пяти чисел мы в начале алгоритма задаем переменную max, которая изначально равна переменной a, то есть значение первого числа или же значение веса первой гири. Далее мы проводим четыре подряд идущих сравнения, чтобы выяснить, а не превышает ли очередное число текущее значение переменной max. Если это так, то есть число превышает значение, то мы обновляем переменную max. Это вы можете видеть в блоках процесс под блоками решения. И по завершению этого алгоритма в переменной max будет храниться наибольшее значение из 5 весов гирь или наибольшее из 5 введенных чисел. Как и в двух предыдущих задачах, давайте перейдем от графического представления алгоритма к коду на языке C-Sharp. Итак, перейдем в редактор Visual Studio Code, создадим там каталог Task4 и создадим в этом каталоге новый проект. Все той же командой можем воспользоваться и взять ее из истории команд.NET New Console. Перейдем в файл с исходным кодом. Согласно блок-схеме создадим 5 целочисленных переменных для хранения весов гирь и присвоим им некоторые произвольные значения. Друзья, обратите внимание, что символ присваивания я отделяю пробелом от имени переменной, а также пробелом от значения. Это делается для повышения читаемости. Это действие можно сделать автоматически, используя инструменты VS Code. Для этого необходимо целиком выделить интересующий фрагмент, нажать правой кнопкой мыши и найти пункт меню формат документ. Эта опция отформатирует документ в соответствии с рекомендациями по оформлению кода для языка C-Sharp. В частности, как вы можете видеть, добавились пробелы, отделяющие присваивание от имен переменных. Далее мы создадим переменную max, которая изначально инициализируется первой переменной a. И согласно Болл-схеме нам необходимо сделать четыре сравнения, чтобы определить не превышает ли каждая из переменных b, c, d, e нашу переменную max. Начнем с переменной b. Напоминаю, что в условии мы помещаем выражение типа bool. То есть логическое выражение, которое может иметь только два значения true и false. Далее в фигурных скобках мы помещаем код, который соответствует ветке yes. То есть если это условие верно. В данном случае, согласно блок-схеме, мы обновляем значение переменной max. И для ускорения разработки этот фрагмент кода можно скопировать и повторить его три раза. Обращаю внимание, что нужно быть внимательным при копировании, поскольку могут появляться опечатки. Итак, делаем соответствующие замены. Переменная D и пятая переменная E. Итак, друзья, следующий момент. Обратите внимание, что здесь отсутствует ветвь ELSE. Она отсутствует по той причине, что нет какого-то отдельного действия специального, если это условие окажется неверным. Если проверяемое условие окажется неверным, то никаких отдельных действий мы делать не будем, а просто перейдем к следующей проверке. действий мы делать не будем, а просто перейдем к следующей проверке. Итак, выведем на экран значение переменной максимум, чтобы проверить правильность работы алгоритма. Итак, проверяем еще раз все наши переменные,раняем файл со сходным кодом и командой.NET RUN компилируем и запускаем проект. Ожидаем увидеть на экране 10. На экране мы действительно видим значение 10, что говорит о правильной работе алгоритма. Однако правильность работы алгоритма я рекомендую проверять и на других входных данных. Применительно к этой задаче можно использовать различные наборы данных, в частности, когда наибольшее число находится в начале списка, где-то в середине списка или же в конце. Таким образом, вы проверите работу этого логаритма при различных входных условиях. Итак, сохраним наши наработки в репозитории git. Проиндексируем целиком каталог task4. Далее создадим commit с соответствующим комментарием. И укажем, что этот каталог добавлен. Ну что, друзья, мы дошли до финального раздела этой лекции. Это циклы в языке C-Sharp. В этом разделе мы вспомним, как циклы оформляются с помощью блок-схемы, а также запрограммилы в языке C-Sharp. В этом разделе мы вспомним, как циклы оформляются с помощью блок-схемы, а также запрограммируем их на C-Sharp. Предлагаю привести вам 2-3 варианта использования циклов в реальной жизни. А я пока приведу свои примеры. Первый пример заключается в чтении непрочитанных сообщений электронной почты. В этом случае клиент подключается к серверу и извлекает сообщение, пока не дойдет до конца. Второй пример, друзья, это сканирование антивирусных файлов на предмет наличия в них вредоносного кода. В данном случае антивирус сканирует указанный каталог до тех пор, пока не переберет все файлы. Ну и третий пример – это поисковые задачи, в которых требуется найти объект в каком-либо хранилище. В этом случае программа, которая осуществляет поиск целевого объекта, переберет их всех, пока не найдет интересующий нас объект или не дойдет до конца. Итак, друзья, давайте рассмотрим базовую задачу на применение циклических конструкций. В этом примере на вход подается некоторое натуральное число n и требуется вывести на экран все числа, которые находятся в промежутке от 1 до n. Для начала предлагаю сформулировать основные этапы этой задачи, затем мы с вами построим блок схему, после чего оживим ее на языке C-sharp. Первым этапом мы вводим натуральное число n. Далее нам каким-то образом нужно осуществить проход по числам от 1 и до n и вывести их на экран. Друзья, как вы думаете, какой тип алгоритма здесь нам поможет? Совершенно верно, если вашим предположением был цикл. В случае, если количество итераций или же повторяемых действий заранее неизвестно, или превышает количество повторений 2-3, в этом случае рекомендуется использовать именно этот вид алгоритма. В следующем этапе давайте построим блок-схему для этого алгоритма. Для этого, друзья, необходимо определиться с составляющими элементами цикла. Напомню, первый элемент – это повторяемое действие, то есть то, что мы хотим повторять на каждой итерации. Второй элемент цикла это некоторые вспомогательные переменные. Как правило, это переменная счетчик, но могут быть и другие. И третий компонент это самоусловие цикла, то есть выражение типа bool или же логического типа, которое определяет будет выполняться очередная итерация или нет. Друзья, в течение двух-трех минут предлагаю вам самостоятельно заполнить элементы для этой блок-схемы, а затем проверим ваши наработки. you you you you you you you you Итак, давайте посмотрим, что у вас получилось. В качестве повторяемого действия мы будем использовать вывод на экран переменной i, которая, в свою очередь, является той самой вспомогательной переменной счетчика. Изначально, обратите внимание, она равна единице и в теле цикла она каждый раз увеличивается на единицу. Условием цикла будет неравенство переменная i меньше либо равна n, то есть неравенство, которое позволит нам вовремя остановить цикл в тот момент, когда переменная i дойдет до значения переменной n. Как только это произойдет и i сравняется с n, у нас выполнится последняя итерация цикла и на этом он остановится. Алгоритм решения задачи готов. Давайте попробуем оживить его на языке C-sharp. Итак, вернемся в редактор. В каталоге lesson1 создадим каталог для нового задания. Перейдем в него и создадим там проект. Перейдем в файл со сходным кодом И согласно блок-схеме создадим там переменную n Допустим, равное числу 100 То есть это будет верхний предел для количества итераций Далее создадим переменную счетчик i Изначально она равна 1 И далее, друзья, нам нужно создать цикл на языке C-sharp. Для создания цикла в большинстве языков программирования можно использовать оператор while. После этого ключевого слова в круглых скобочках, так же как и в условной конструкции, мы указываем условие. То есть то условие, которое будет определять, выполняется ли следующая операция или нет. Согласно блок-схеме напишем условие для этого цикла. i меньше либо равно n. Пока выделены условия, то есть выражение типа bool верно, цикл будет выполняться. И очередная итерация будет запущена. В фигурных скобочках мы указываем тело цикла, то есть те операции, которые будут выполняться на каждом повторении этого цикла. Согласно блок-схеме в цикле нам необходимо вывести значение переменной i. Сделаем это с помощью метода консолы Brightline. И передадим в качестве аргумента переменную i. Не забываем перейти к следующему значению счетчика и увеличить переменную i на единицу. Также, друзья, напомню вам про возможность автоматически отформатировать ваш код путем выделения его, нажатия правой кнопки и выбора меню формат документ. Он сам расставит необходимые пробелы, а также перенос на новую строчку, где это нужно. Давайте запустим наш код, посмотрим, что получилось. Итак, сохраним файл с исходным кодом program.cs и выполним команду в каталоге с проектом.NET RAN. Ожидаем увидеть список целых чисел от 1 до 100. На экране мы видим числа, расположенные друг под другом от 1 до 100, что говорит о правильном выполнении алгоритма. Однако, друзья, не всегда такой вывод может быть удобен, особенно если количество чисел превышает 50, 100 и так далее. Иногда требуется вывести числа в строку. Для этого, друзья, необходимо использовать другой метод вывода на консоль. Давайте воспользуемся второй разновидностью вывода элементов на консоль. Для этого мы воспользуемся все тем же модулем консоли, только воспользуемся методом вwrite. Предыдущий метод давайте закомментируем, то есть его отключим. Итак, друзья, давайте попробуем запустить наш код И посмотрим, как вывод будет выглядеть в этом случае Как вы можете видеть, числа выведены в строку Но между ними нет никаких разделителей Друзья, какие у вас есть предположения, как это можно сделать? Друзья, какие у вас есть предположения, как это можно сделать? Самый простой вариант это добавить пробел после вывода каждого числа. Для этого можем воспользоваться тем же методом консоли в write, только в качестве аргумента передать ему просто пробел. Напомню, что пробел мы можем указать в одинарных кавычках, то есть передавая значение типа char. Итак, сохраним исходный код, запустим и посмотрим, каков будет результат. Итак, мы видим вывод чисел в одну строку, они разделены пробелом, тем самым повышается их читаемость. Друзья, обращаю ваше внимание, что входной параметр n, который используется в нашем коде, можно менять. Его можно задать равным тысяче, сотне или миллиону. Плюс использования циклов заключается в том, что при изменении входных данных нет необходимости менять ни алгоритм, ни расширять объем кода. Итак, сохраним наши наработки в репозитории git. Для этого проиндексируем целиком наш созданный каталог task5. Сформируем соответствующий commit. Не забываем указывать имя команды git и проверяем правильность указываемых ключей. Отправим наши наработки в удаленной репозитории. И на этом практическая часть нашей сегодняшней лекции заканчивается. Ну что, друзья, на этом первая лекция подошла к концу. Давайте подведем итоги сегодняшнего занятия. Напомним, мы рассмотрели важные характеристики языка C-Sharp, которые позволили его выбрать в качестве основного инструмента для решения задач на текущем курсе. Напомним, это его статическая типизация и возможность создавать простые программы, не перегружая их сложным синтаксисом. Затем мы настроили и проверили работоспособность окружения для разработки программ на C-Sharp. Это платформа.NET и редактор Visual Studio Code с необходимыми расширениями. После чего мы решили блок задач на работу с переменными, арифметикой, условиями и циклическими конструкциями. На этом, друзья, я с вами прощаюсь. Благодарю за внимание. Увидимся на семинарах и на лекции №2. you",
    "chunks": [
        {
            "timestamp": [
                0.0,
                99.86
            ],
            "text": " you you you you Дорогие друзья, рад вас приветствовать на курсе знакомства с языками программирования."
        },
        {
            "timestamp": [
                100.48,
                101.9
            ],
            "text": " Сегодня у нас вводная лекция."
        },
        {
            "timestamp": [
                102.4,
                109.04
            ],
            "text": " Мы поговорим о языках программирования в целом, о языке программирования C-Sharp, об алгоритмах, а также порешаем задачи."
        },
        {
            "timestamp": [
                109.66,
                115.88
            ],
            "text": " Друзья, цель этого курса – познакомить вас с синтаксисом языка программирования высокого уровня,"
        },
        {
            "timestamp": [
                116.68,
                125.7
            ],
            "text": " дать представление о подходах к написанию базовых алгоритмов, а также дать представление о подходах к написанию качественного кода."
        },
        {
            "timestamp": [
                125.7,
                130.88
            ],
            "text": " Друзья, перед тем как продолжить и познакомиться с программой настоящего курса, а также с планом"
        },
        {
            "timestamp": [
                130.88,
                136.72
            ],
            "text": " работ на сегодня, предлагаю познакомиться и я расскажу немного о себе. Меня зовут Черняев"
        },
        {
            "timestamp": [
                136.72,
                142.56
            ],
            "text": " Денис. В компании Geekbrains я работаю уже более года. До прихода в компанию я работал частным"
        },
        {
            "timestamp": [
                142.56,
                145.12
            ],
            "text": " преподавателем на порталах дистанционного обучения."
        },
        {
            "timestamp": [
                145.56,
                151.04
            ],
            "text": " Среди преподаваемых предметов я могу выделить языки программирования C, C++, C Sharp, Python."
        },
        {
            "timestamp": [
                151.62,
                157.08
            ],
            "text": " Также могу выделить тематику алгоритмы и структуры данных, операционные системы и компьютерные сети."
        },
        {
            "timestamp": [
                157.44,
                162.44
            ],
            "text": " Друзья, преподавание для меня не является основной работой, это по большей части хобби."
        },
        {
            "timestamp": [
                162.78,
                165.52
            ],
            "text": " Основная моя деятельность это разработка сетевого"
        },
        {
            "timestamp": [
                165.52,
                171.3
            ],
            "text": " программного обеспечения, служб Windows, а также построение вычислительных систем на базе оборудования"
        },
        {
            "timestamp": [
                171.3,
                177.18
            ],
            "text": " Cisco и операционных систем Linux. Итак, друзья, предлагаю ознакомиться с планом настоящего курса,"
        },
        {
            "timestamp": [
                177.4,
                182.64
            ],
            "text": " который состоит из шести лекций и восьми семинарских занятий. Сегодня у нас вводная лекция,"
        },
        {
            "timestamp": [
                182.86,
                190.42
            ],
            "text": " мы будем говорить о языке C-Sharp, о его основных особенностях, а также решать первые свои задачи. Вторая лекция у нас будет посвящена"
        },
        {
            "timestamp": [
                190.42,
                195.96
            ],
            "text": " массивам, на третьей лекции мы будем говорить о функциях, о их составляющих частях и о том,"
        },
        {
            "timestamp": [
                196.04,
                202.46
            ],
            "text": " как их применять в наших программах. Четвертая, пятая и шестая лекция затронут такие тематики,"
        },
        {
            "timestamp": [
                202.64,
                206.24
            ],
            "text": " как правила написания хорошего кода, двумерные массивы,"
        },
        {
            "timestamp": [
                206.64,
                212.6
            ],
            "text": " а также такой подход к написанию алгоритмов, как рекурсия. Итак, план работы на сегодня у нас"
        },
        {
            "timestamp": [
                212.6,
                219.06
            ],
            "text": " следующий. Поговорим о том, почему же C-Sharp был выбран инструментом для решения задач на текущем"
        },
        {
            "timestamp": [
                219.06,
                225.78
            ],
            "text": " курсе. Настроим редактор Visual Studio Code. Вспомним основные понятия из курса ведения программирования"
        },
        {
            "timestamp": [
                225.78,
                227.98
            ],
            "text": " и приступим к написанию наших"
        },
        {
            "timestamp": [
                227.98,
                229.68
            ],
            "text": " первых программ. Друзья,"
        },
        {
            "timestamp": [
                229.88,
                232.08
            ],
            "text": " я думаю, при просмотре программы текущего"
        },
        {
            "timestamp": [
                232.08,
                234.0
            ],
            "text": " курса многие из вас задались вопросом,"
        },
        {
            "timestamp": [
                234.24,
                236.0
            ],
            "text": " а почему именно C-Sharp выбран"
        },
        {
            "timestamp": [
                236.0,
                237.86
            ],
            "text": " в качестве основного инструмента для"
        },
        {
            "timestamp": [
                237.86,
                240.32
            ],
            "text": " решения задач. В команде Geekbrains"
        },
        {
            "timestamp": [
                240.32,
                242.28
            ],
            "text": " было рассмотрено несколько языков"
        },
        {
            "timestamp": [
                242.28,
                244.0
            ],
            "text": " программирования, представленных на"
        },
        {
            "timestamp": [
                244.0,
                245.12
            ],
            "text": " экране, и я могу сказать следующее, то что на текущем уровков программирования, представленных на экране."
        },
        {
            "timestamp": [
                246.66,
                247.0
            ],
            "text": " И я могу сказать следующее."
        },
        {
            "timestamp": [
                249.24,
                249.34
            ],
            "text": " То, что на текущем уровне программирования,"
        },
        {
            "timestamp": [
                251.64,
                252.52
            ],
            "text": " на текущем уровне написания кода,"
        },
        {
            "timestamp": [
                255.08,
                255.3
            ],
            "text": " программы, написанные на любом языке программирования,"
        },
        {
            "timestamp": [
                258.1,
                261.22
            ],
            "text": " из представленных будут выглядеть примерно одинаково. И написав программу на любом из представленных языков,"
        },
        {
            "timestamp": [
                261.52,
                265.76
            ],
            "text": " вы без труда сможете перенести ее на любой другой понравившийся вам"
        },
        {
            "timestamp": [
                265.76,
                270.44
            ],
            "text": " язык. Давайте рассмотрим критерии, по которым язык программирования C-Sharp был выбран в качестве"
        },
        {
            "timestamp": [
                270.44,
                274.98
            ],
            "text": " основного инструмента для решения задач на текущем курсе. Друзья, на экране вы можете"
        },
        {
            "timestamp": [
                274.98,
                281.9
            ],
            "text": " видеть три фрагмента исходного кода, в котором создаются три переменные с разными типами данных."
        },
        {
            "timestamp": [
                281.9,
                287.14
            ],
            "text": " Обратите внимание, то что в языках Python и JavaScript тип данных"
        },
        {
            "timestamp": [
                287.14,
                293.02
            ],
            "text": " не указывается. В языке C-Sharp требуется явного указания типа данных при создании переменной."
        },
        {
            "timestamp": [
                293.02,
                298.66
            ],
            "text": " Друзья, дело в том, что язык C-Sharp имеет статическую типизацию, то есть он требует"
        },
        {
            "timestamp": [
                298.66,
                303.76
            ],
            "text": " явного указания типа данных при ее создании. На самом деле это требование можно обойти,"
        },
        {
            "timestamp": [
                303.76,
                306.0
            ],
            "text": " однако на начальных этапах разработки"
        },
        {
            "timestamp": [
                306.0,
                311.28
            ],
            "text": " программ я это делать не рекомендую. Преимущество статической типизации заключается в следующем."
        },
        {
            "timestamp": [
                311.28,
                317.88
            ],
            "text": " На каждом этапе выполнения программы, на каждом этапе написания ее кода вы видите и понимаете,"
        },
        {
            "timestamp": [
                317.88,
                323.94
            ],
            "text": " какой тип данных у вас имеет каждая из переменных. Кроме того, друзья, я отмечу, что переходить с"
        },
        {
            "timestamp": [
                323.94,
                326.48
            ],
            "text": " разработки на языке с динамической"
        },
        {
            "timestamp": [
                326.48,
                332.0
            ],
            "text": " типизации на язык со статической типизации значительно сложнее, чем наоборот. Например,"
        },
        {
            "timestamp": [
                332.0,
                338.46
            ],
            "text": " разработчику на языках C, C++ или Java значительно проще перейти на разработку на языке Python или,"
        },
        {
            "timestamp": [
                338.46,
                346.9
            ],
            "text": " например, PHP, нежели чем в обратном направлении. Отмечу, что статическую типизацию также имеют языки C, C++, Java. Давайте"
        },
        {
            "timestamp": [
                346.9,
                353.26
            ],
            "text": " рассмотрим второе свойство, которое выделяет язык C-sharp среди этих языков. На экране представлены"
        },
        {
            "timestamp": [
                353.26,
                357.94
            ],
            "text": " три фрагмента исходного кода, на которых выводится на экран приветственное сообщение"
        },
        {
            "timestamp": [
                357.94,
                366.36
            ],
            "text": " Hello World. Друзья, обратите внимание на наличие дополнительных кодовых конструкций в языках C++ и Java."
        },
        {
            "timestamp": [
                366.84,
                373.66
            ],
            "text": " Кому знакомы ключевые слова class или main, предлагаю написать об этом сообщением в чат."
        },
        {
            "timestamp": [
                373.66,
                379.12
            ],
            "text": " На начальных этапах при решении алгоритмических задач нас явно будут отвлекать такие конструкции,"
        },
        {
            "timestamp": [
                379.34,
                384.96
            ],
            "text": " как классы, точки входа в приложение, пространство имен от написания алгоритмов."
        },
        {
            "timestamp": [
                387.24,
                392.76
            ],
            "text": " точки входа в приложение, пространство имен, от написания алгоритмов. В языке C-Sharp можно воспользоваться режимом, который позволяет писать простые программы, не перегружая их сложным"
        },
        {
            "timestamp": [
                392.76,
                398.18
            ],
            "text": " синтексисом. То есть все необходимые конструкции, в частности, которые вы видите на экране у языков"
        },
        {
            "timestamp": [
                398.18,
                404.18
            ],
            "text": " C++, Java, компилятор C-Sharp будет поставлять автоматически, а мы сможем сконцентрироваться"
        },
        {
            "timestamp": [
                404.18,
                410.56
            ],
            "text": " на решении алгоритмических задач, будь то связанных с циклами, будь то светлениями, будь то с арифметикой."
        },
        {
            "timestamp": [
                410.9,
                418.6
            ],
            "text": " Другими словами, язык C-Sharp позволяет писать код точно так же, как и на языке Python, но используя все плюсы статической типизации."
        },
        {
            "timestamp": [
                418.66,
                425.84
            ],
            "text": " Да, если вдруг часть слов, которые я сказал, была вам непонят, или же вы слышите их впервые, можете не переживать."
        },
        {
            "timestamp": [
                426.26,
                429.8
            ],
            "text": " Друзья, поверьте на слово, что язык C-Sharp – это отличный выбор"
        },
        {
            "timestamp": [
                429.8,
                433.98
            ],
            "text": " для старта программирования, решения алгоритмических задач"
        },
        {
            "timestamp": [
                433.98,
                436.98
            ],
            "text": " и полученные навыки вы сможете легко перенести"
        },
        {
            "timestamp": [
                436.98,
                439.2
            ],
            "text": " на любой другой понравившийся вам язык."
        },
        {
            "timestamp": [
                439.66,
                442.72
            ],
            "text": " Друзья, обращаю ваше внимание, что целью настоящего курса"
        },
        {
            "timestamp": [
                442.72,
                445.5
            ],
            "text": " не является изучение синтеза языка C-Sharp,"
        },
        {
            "timestamp": [
                445.5,
                451.76
            ],
            "text": " его продвинутых возможностей и функционалов. Целью настоящего курса является получение навыков"
        },
        {
            "timestamp": [
                451.76,
                458.48
            ],
            "text": " решения алгоритмов различных уровней сложности, а также изучение лучших практик при их построении."
        },
        {
            "timestamp": [
                458.48,
                462.8
            ],
            "text": " И C-Sharp нам в этом деле понадобится как инструмент создания программ."
        },
        {
            "timestamp": [
                462.8,
                465.3
            ],
            "text": " Для использования любого языка программирования"
        },
        {
            "timestamp": [
                465.3,
                468.0
            ],
            "text": " нам потребуется создать и настроить для него окружение."
        },
        {
            "timestamp": [
                468.42,
                471.18
            ],
            "text": " Для языка программирования C-Sharp это платформа.NET."
        },
        {
            "timestamp": [
                471.5,
                475.26
            ],
            "text": " Для удобства написания кода мы будем использовать редактор Visual Studio Code"
        },
        {
            "timestamp": [
                475.26,
                477.54
            ],
            "text": " и систему контроля версии Git,"
        },
        {
            "timestamp": [
                477.86,
                481.42
            ],
            "text": " которые, скорее всего, у вас уже настроены на предыдущем курсе."
        },
        {
            "timestamp": [
                482.06,
                485.68
            ],
            "text": " Если же нет, то инструкцию по ним я продублирую в описании"
        },
        {
            "timestamp": [
                485.68,
                486.68
            ],
            "text": " к лекции."
        },
        {
            "timestamp": [
                486.68,
                489.82
            ],
            "text": " Друзья, отмечу, что наиболее приоритетный вариант настройки"
        },
        {
            "timestamp": [
                489.82,
                492.92
            ],
            "text": " и установки окружения – это его самостоятельное"
        },
        {
            "timestamp": [
                492.92,
                493.92
            ],
            "text": " развертывание."
        },
        {
            "timestamp": [
                493.92,
                497.88
            ],
            "text": " Однако, если у вас возникнут сложности при настройке"
        },
        {
            "timestamp": [
                497.88,
                501.1
            ],
            "text": " окружения, можно воспользоваться альтернативным вариантом."
        },
        {
            "timestamp": [
                501.1,
                504.02
            ],
            "text": " Заключается он в использовании облачного сервиса, который"
        },
        {
            "timestamp": [
                504.02,
                506.26
            ],
            "text": " предоставляет вам удаленный рабочий стол"
        },
        {
            "timestamp": [
                506.26,
                512.56
            ],
            "text": " с уже установленными и настроенными, редактором Visual Studio Code, системой контроля версии Git,"
        },
        {
            "timestamp": [
                512.56,
                517.82
            ],
            "text": " а также с платформой.NET. Этим сервисом можно воспользоваться в случае, если, например,"
        },
        {
            "timestamp": [
                517.82,
                522.82
            ],
            "text": " ваше оборудование не позволяет установить необходимое программное обеспечение. Работа"
        },
        {
            "timestamp": [
                522.82,
                525.12
            ],
            "text": " с этим сервисом можно напрямую из браузера."
        },
        {
            "timestamp": [
                525.12,
                530.5
            ],
            "text": " Инструкции по работе с этим облачным средством будут продублированы к описанию под лекции."
        },
        {
            "timestamp": [
                530.5,
                534.84
            ],
            "text": " Для установки и настройки платформы.NET нам потребуется проделать следующие шаги."
        },
        {
            "timestamp": [
                534.84,
                542.32
            ],
            "text": " Перейдем на страницу загрузки установщика для платформы.NET. Выберем необходимую для нас"
        },
        {
            "timestamp": [
                542.32,
                545.64
            ],
            "text": " архитектуру. Это может быть либо Linux подобной операционной системы,"
        },
        {
            "timestamp": [
                545.64,
                551.46
            ],
            "text": " либо Mac или Windows. И далее нам необходимо будет выбрать разрядность. Друзья, в большинстве"
        },
        {
            "timestamp": [
                551.46,
                558.06
            ],
            "text": " случаев это будет 64-разрядный установочный файл, который необходимо загрузить и установить следуя"
        },
        {
            "timestamp": [
                558.06,
                565.78
            ],
            "text": " инструкциям установочника. Далее нам требуется настроить расширение для удобства разработки в Visual Studio Code."
        },
        {
            "timestamp": [
                565.78,
                569.92
            ],
            "text": " Следующим шагом для настройки Visual Studio Code под разработку"
        },
        {
            "timestamp": [
                569.92,
                574.16
            ],
            "text": " на C-Sharp откроем среду разработки и перейдем в соответствующую"
        },
        {
            "timestamp": [
                574.16,
                576.92
            ],
            "text": " вкладку с установкой расширений."
        },
        {
            "timestamp": [
                576.92,
                579.88
            ],
            "text": " Друзья, нам понадобится буквально одно расширение,"
        },
        {
            "timestamp": [
                579.88,
                583.76
            ],
            "text": " которое называется C-Sharp для Visual Studio Code."
        },
        {
            "timestamp": [
                583.76,
                586.46
            ],
            "text": " Введем первую часть названия в поиске C-Sharp"
        },
        {
            "timestamp": [
                586.46,
                589.32
            ],
            "text": " и выберем первые предложенные в списке расширения."
        },
        {
            "timestamp": [
                590.1,
                594.3
            ],
            "text": " Обратите внимание на производителя, на поставщика этого расширения,"
        },
        {
            "timestamp": [
                594.3,
                596.3
            ],
            "text": " Microsoft, а также на количество скачиваний,"
        },
        {
            "timestamp": [
                597.12,
                599.98
            ],
            "text": " чтобы убедиться, что это действительно оригинальное расширение."
        },
        {
            "timestamp": [
                600.66,
                603.8
            ],
            "text": " Для установки необходимо нажать кнопку Install."
        },
        {
            "timestamp": [
                604.08,
                606.48
            ],
            "text": " У меня такой кнопки нет, поскольку данное расширение"
        },
        {
            "timestamp": [
                606.48,
                613.2
            ],
            "text": " у меня уже установлено. Итак, друзья, на этом установка и настройка окружения для языка C-Sharp"
        },
        {
            "timestamp": [
                613.2,
                618.88
            ],
            "text": " закончена. На данном этапе мы готовы к написанию наших первых программ на языке C-Sharp. В качестве"
        },
        {
            "timestamp": [
                618.88,
                624.38
            ],
            "text": " первой программы предлагаю реализовать вывод приездного сообщения на экран Hello World. О такой"
        },
        {
            "timestamp": [
                624.38,
                625.94
            ],
            "text": " программе вы наверняка уже слышали."
        },
        {
            "timestamp": [
                626.38,
                628.58
            ],
            "text": " Обычно ее используют для того, чтобы понять,"
        },
        {
            "timestamp": [
                628.88,
                631.36
            ],
            "text": " а правильно ли настроено наше окружение."
        },
        {
            "timestamp": [
                632.06,
                633.98
            ],
            "text": " Итак, перейдем в редактор Visual Studio Code."
        },
        {
            "timestamp": [
                635.08,
                637.84
            ],
            "text": " Вести разработку мы сегодня будем в каталоге Lesson1."
        },
        {
            "timestamp": [
                637.84,
                640.28
            ],
            "text": " И давайте создадим в нем подкаталог Task1,"
        },
        {
            "timestamp": [
                640.4,
                642.28
            ],
            "text": " в котором мы будем создавать первый проект."
        },
        {
            "timestamp": [
                643.62,
                646.84
            ],
            "text": " Итак, создавать каталоги мы можем с помощью команды"
        },
        {
            "timestamp": [
                646.84,
                653.8
            ],
            "text": " mkdir от английского make directory создать директорию передаем в качестве параметра ей"
        },
        {
            "timestamp": [
                653.8,
                667.76
            ],
            "text": " имя требуемого каталога данном случае task 1 и не забудем в него перейти командой cd от английского change directory. Итак, друзья, для создания"
        },
        {
            "timestamp": [
                667.76,
                675.7
            ],
            "text": " проекта на языке C-sharp мы используем команду.NET new console. Обращаю"
        },
        {
            "timestamp": [
                675.7,
                680.28
            ],
            "text": " ваше внимание, что запускать ее нужно в том каталоге, в котором вы хотите создать"
        },
        {
            "timestamp": [
                680.28,
                689.78
            ],
            "text": " необходимые файлы проекта. Команда.NET-new-console создаст файл с исходным кодом"
        },
        {
            "timestamp": [
                689.78,
                698.9
            ],
            "text": " program.cs, а также файл с расширением C-sharp project, который и отвечает за настройку текущего"
        },
        {
            "timestamp": [
                698.9,
                708.02
            ],
            "text": " проекта. Итак, друзья, перейдем в файл program.cs, удалим код, который сгенерировался автоматически, и напишем его самостоятельно."
        },
        {
            "timestamp": [
                708.32,
                713.78
            ],
            "text": " Для вывода информации на консоль в языке C-Sharp мы используем модуль консоль."
        },
        {
            "timestamp": [
                715.78,
                725.8
            ],
            "text": " Этот модуль нам предоставляет метод writeLine, который и осуществляет вывод сообщений, либо же значений переменных,"
        },
        {
            "timestamp": [
                726.1,
                728.38
            ],
            "text": " либо какой-либо другой информации на экран."
        },
        {
            "timestamp": [
                729.04,
                731.94
            ],
            "text": " Давайте выведем сообщение, приветственное Hello World."
        },
        {
            "timestamp": [
                738.86,
                741.92
            ],
            "text": " Друзья, не забываем в конце ставить точку запятой,"
        },
        {
            "timestamp": [
                742.56,
                745.0
            ],
            "text": " для того, чтобы компилятор понимал что на этом"
        },
        {
            "timestamp": [
                745.0,
                751.64
            ],
            "text": " инструкция заканчивается. запятой это признак конца инструкции и переход к"
        },
        {
            "timestamp": [
                751.64,
                760.16
            ],
            "text": " следующей итак запустим наш код с помощью команды. net.ru"
        },
        {
            "timestamp": [
                760.16,
                765.96
            ],
            "text": " обращаю внимание что эта команда нужно выполнять в каталоге, в котором проект был создан."
        },
        {
            "timestamp": [
                766.08,
                767.94
            ],
            "text": " То есть у нас это каталог Task1."
        },
        {
            "timestamp": [
                768.94,
                772.08
            ],
            "text": " Компиляция исходного кода может занимать некоторое время."
        },
        {
            "timestamp": [
                773.74,
                778.58
            ],
            "text": " Итак, на экране мы видим приездное сообщение, что говорит о правильной работе программы."
        },
        {
            "timestamp": [
                779.1,
                782.02
            ],
            "text": " Друзья, не забываем сохранить наши наработки в репозитории Git."
        },
        {
            "timestamp": [
                782.02,
                785.82
            ],
            "text": " Для этого перейдем на один каталог повыше"
        },
        {
            "timestamp": [
                785.82,
                788.22
            ],
            "text": " и выполним оттуда команду git add"
        },
        {
            "timestamp": [
                788.22,
                793.84
            ],
            "text": " и проиндексируем целиком наш созданный каталог."
        },
        {
            "timestamp": [
                794.92,
                795.42
            ],
            "text": " Task 1."
        },
        {
            "timestamp": [
                796.54,
                800.2
            ],
            "text": " Создадим commit с указанием комментария."
        },
        {
            "timestamp": [
                804.38,
                812.36
            ],
            "text": " Допустим, назовем его урок 1 перед этим указав действия да то что мы добавили новый проект"
        },
        {
            "timestamp": [
                812.36,
                832.42
            ],
            "text": " урок 1 ну и допустим task 1 после чего отправим наши наработки на удаленной репозитории с помощью команды git push origin-main. Отмечу, что каталог вашего"
        },
        {
            "timestamp": [
                832.42,
                838.22
            ],
            "text": " локального репозитория, в моем случае это 0.1, нижнее подчеркивание C-sharp, должен"
        },
        {
            "timestamp": [
                838.22,
                843.4
            ],
            "text": " содержать файл gitignore, в котором приведены инструкции для того, чтобы"
        },
        {
            "timestamp": [
                843.4,
                847.48
            ],
            "text": " git не отправлял на удаленный репозиторий файлы,"
        },
        {
            "timestamp": [
                847.56,
                848.84
            ],
            "text": " в которых нет необходимости."
        },
        {
            "timestamp": [
                849.12,
                853.12
            ],
            "text": " Это различные бинарные файлы, временные и прочие."
        },
        {
            "timestamp": [
                853.5,
                856.06
            ],
            "text": " Именно этот файл позволяет это предупредить."
        },
        {
            "timestamp": [
                856.74,
                859.9
            ],
            "text": " Итак, друзья, наше окружение настроено и проверено."
        },
        {
            "timestamp": [
                860.38,
                867.02
            ],
            "text": " Прежде чем приступить к решению задач, давайте вспомним базовые термины из курса «Ведение в программирование»."
        },
        {
            "timestamp": [
                867.02,
                868.68
            ],
            "text": " Рассмотрим две группы терминов."
        },
        {
            "timestamp": [
                869.14,
                872.38
            ],
            "text": " Первая группа – это переменные, типы данных и арифметика."
        },
        {
            "timestamp": [
                872.68,
                876.06
            ],
            "text": " Вторая группа терминов – это виды алгоритмических конструкций."
        },
        {
            "timestamp": [
                876.8,
                879.04
            ],
            "text": " Итак, первый термин – это переменные."
        },
        {
            "timestamp": [
                879.34,
                885.92
            ],
            "text": " Под переменной мы обычно понимаем некоторую область памяти, которая предназначена для хранения значений определенного"
        },
        {
            "timestamp": [
                885.92,
                891.34
            ],
            "text": " типа. Переменной можно также дать и более простое определение, например, назвать ее некоторым"
        },
        {
            "timestamp": [
                891.34,
                897.28
            ],
            "text": " контейнером для хранения определенных значений. Эти значения могут быть целочисленными, строковыми,"
        },
        {
            "timestamp": [
                897.28,
                902.62
            ],
            "text": " а также хранить в себе и более сложные объекты. Переменная имеет некоторую характеристику, которую"
        },
        {
            "timestamp": [
                902.62,
                905.68
            ],
            "text": " мы называем типом данных. Тип данных нам говорит"
        },
        {
            "timestamp": [
                905.68,
                911.22
            ],
            "text": " о том, какого рода значения могут храниться в этой переменной. Например, тип данных может быть"
        },
        {
            "timestamp": [
                911.22,
                917.78
            ],
            "text": " целочисленный, строковый, вещественные числа, а также и более сложные объекты. Друзья, важное"
        },
        {
            "timestamp": [
                917.78,
                922.26
            ],
            "text": " понятие для тех, кто только знакомится с программированием, это арифметика или же"
        },
        {
            "timestamp": [
                922.26,
                926.36
            ],
            "text": " арифметические операции. Среди них можно выделить простые, такие как"
        },
        {
            "timestamp": [
                926.36,
                932.3
            ],
            "text": " сложение, вычитание, умножение, деление. А также есть и более сложные, например, деление с остатком,"
        },
        {
            "timestamp": [
                932.3,
                938.94
            ],
            "text": " возведение в степень или же извлечение квадратного корня. Все эти операции мы будем использовать в"
        },
        {
            "timestamp": [
                938.94,
                948.02
            ],
            "text": " решении задач на текущем курсе. Вторая группа терминов описывает виды алгоритмов. Напомню, линейный алгоритм подразумевает последовательное"
        },
        {
            "timestamp": [
                948.02,
                951.6
            ],
            "text": " выполнение инструкций без изменения их порядка"
        },
        {
            "timestamp": [
                951.6,
                952.6
            ],
            "text": " следования."
        },
        {
            "timestamp": [
                952.6,
                956.7
            ],
            "text": " Условный алгоритм подразумевает разветвление алгоритма"
        },
        {
            "timestamp": [
                956.7,
                960.64
            ],
            "text": " на две и более ветвей в зависимости от некоторого"
        },
        {
            "timestamp": [
                960.64,
                961.64
            ],
            "text": " условия."
        },
        {
            "timestamp": [
                961.64,
                964.1
            ],
            "text": " Ну и третий вид алгоритма – это циклический."
        },
        {
            "timestamp": [
                964.1,
                966.4
            ],
            "text": " Циклический алгоритм подразумевает повторение"
        },
        {
            "timestamp": [
                966.4,
                968.8
            ],
            "text": " либо одинаковых действий, либо похожих."
        },
        {
            "timestamp": [
                969.24,
                971.92
            ],
            "text": " Также для циклических алгоритмов мы используем"
        },
        {
            "timestamp": [
                971.92,
                974.9
            ],
            "text": " некоторые условия, которые позволяют ограничить"
        },
        {
            "timestamp": [
                974.9,
                976.12
            ],
            "text": " количество этих повторений."
        },
        {
            "timestamp": [
                976.78,
                978.46
            ],
            "text": " Или же, другими словами, итераций."
        },
        {
            "timestamp": [
                979.1,
                980.7
            ],
            "text": " Итак, друзья, мы настроили окружение,"
        },
        {
            "timestamp": [
                981.08,
                982.68
            ],
            "text": " вспомнили базовые термины."
        },
        {
            "timestamp": [
                983.04,
                985.46
            ],
            "text": " Давайте приступим к знакомству с языком программирования"
        },
        {
            "timestamp": [
                985.46,
                991.56
            ],
            "text": " и приступим к решению первых задач. Начать предлагаю с базовых вещей, с создания переменных"
        },
        {
            "timestamp": [
                991.56,
                997.48
            ],
            "text": " и арифметических операций над ними. Итак, рассмотрим первый пример. В нем требуется объявить"
        },
        {
            "timestamp": [
                997.48,
                1003.26
            ],
            "text": " переменную, задать ей начальное значение и вывести его на экран. Перед тем, как начать писать код,"
        },
        {
            "timestamp": [
                1003.56,
                1007.52
            ],
            "text": " давайте посмотрим, а как в языке программирования C-Sharp создаются переменные."
        },
        {
            "timestamp": [
                1008.02,
                1009.96
            ],
            "text": " Создание переменной в языке C-Sharp,"
        },
        {
            "timestamp": [
                1010.0,
                1012.92
            ],
            "text": " а также и в большинстве других языков со статической типизацией,"
        },
        {
            "timestamp": [
                1013.28,
                1015.48
            ],
            "text": " состоит из трех основных этапов."
        },
        {
            "timestamp": [
                1015.98,
                1018.54
            ],
            "text": " Первый этап – это указание типа данных"
        },
        {
            "timestamp": [
                1018.54,
                1021.08
            ],
            "text": " для значения, которое в этой переменной будет храниться."
        },
        {
            "timestamp": [
                1021.64,
                1025.08
            ],
            "text": " Второй этап – это указание непосредственно имени переменной"
        },
        {
            "timestamp": [
                1025.08,
                1027.48
            ],
            "text": " или же ее называют идентификатор."
        },
        {
            "timestamp": [
                1027.78,
                1029.9
            ],
            "text": " На идентификатор накладываются ограничения."
        },
        {
            "timestamp": [
                1030.1,
                1032.3
            ],
            "text": " Оно не должно начинаться с цифр,"
        },
        {
            "timestamp": [
                1032.98,
                1035.68
            ],
            "text": " должно состоять из латинских букв,"
        },
        {
            "timestamp": [
                1036.1,
                1038.44
            ],
            "text": " а также может начинаться с символа подчеркивания."
        },
        {
            "timestamp": [
                1039.04,
                1042.44
            ],
            "text": " И важное ограничение, которое накладывается на именование переменных,"
        },
        {
            "timestamp": [
                1042.44,
                1046.24
            ],
            "text": " это то, что оно не должно совпадать с зарезервированными"
        },
        {
            "timestamp": [
                1046.24,
                1053.14
            ],
            "text": " ключевыми словами языка C-Sharp. Ну и третий этап это инициализация, то есть присвоение переменной"
        },
        {
            "timestamp": [
                1053.14,
                1059.02
            ],
            "text": " определенного значения. В данном случае мы присваиваем конкретное значение в виде целого"
        },
        {
            "timestamp": [
                1059.02,
                1066.62
            ],
            "text": " числа равного 100. Давайте запрограммируем этот пример на языке C-sharp. Итак, перейдем в редактор Visual Studio Code"
        },
        {
            "timestamp": [
                1066.62,
                1090.26
            ],
            "text": " и давайте дополним наш первый проект. Укажем тип данальное значение, допустим, 100. Друзья, для того, чтобы"
        },
        {
            "timestamp": [
                1090.26,
                1095.06
            ],
            "text": " проверить, правильно ли у нас проинциализирована переменная, проинциализирована ли она вообще,"
        },
        {
            "timestamp": [
                1095.06,
                1108.04
            ],
            "text": " давайте выведем ее значение на экран. Воспользуемся все тем же модулем в консоли и методом writeLine. Напомню, он может выводить на экран как сообщения, так и значения"
        },
        {
            "timestamp": [
                1108.04,
                1114.34
            ],
            "text": " переменных. Для этого в круглых скобках мы укажем имя переменной и не забываем поставить точку"
        },
        {
            "timestamp": [
                1114.34,
                1127.0
            ],
            "text": " запятой как признак конца инструкции. Перейдем в каталог task1 и выполним там программу на запуск нашего проекта task1."
        },
        {
            "timestamp": [
                1131.44,
                1137.12
            ],
            "text": " Итак, на экране мы видим приветственное сообщение hello world, которое мы оставили, а"
        },
        {
            "timestamp": [
                1137.12,
                1146.38
            ],
            "text": " также значение переменной value, которую мы только что создали. Друзья, давайте закомментируем первую строчку программы"
        },
        {
            "timestamp": [
                1146.38,
                1150.62
            ],
            "text": " в консоли в WriteLine с помощью двух слэшей."
        },
        {
            "timestamp": [
                1151.52,
                1156.08
            ],
            "text": " Комментарии мы используем для отключения каких-либо строк кода,"
        },
        {
            "timestamp": [
                1156.08,
                1159.42
            ],
            "text": " а также мы их используем для того, чтобы дать пояснение"
        },
        {
            "timestamp": [
                1159.42,
                1161.98
            ],
            "text": " к какому-либо участку программы."
        },
        {
            "timestamp": [
                1163.22,
                1167.18
            ],
            "text": " Проверим работоспособность нашего кода еще раз."
        },
        {
            "timestamp": [
                1167.18,
                1171.0
            ],
            "text": " Ожидаем увидеть на экране только вывод значения переменной"
        },
        {
            "timestamp": [
                1171.0,
                1174.0
            ],
            "text": " value, что подтверждается выводом."
        },
        {
            "timestamp": [
                1174.0,
                1177.78
            ],
            "text": " Друзья, мы создали целочисленную переменную, проинициализировали"
        },
        {
            "timestamp": [
                1177.78,
                1180.5
            ],
            "text": " ее некоторым значением и вывели на экран."
        },
        {
            "timestamp": [
                1180.5,
                1183.56
            ],
            "text": " Но что если нам понадобится создать значения, которые"
        },
        {
            "timestamp": [
                1183.56,
                1189.3
            ],
            "text": " хранят дробную часть? В данном случае нам понадобится использовать другие типы данных."
        },
        {
            "timestamp": [
                1189.3,
                1192.88
            ],
            "text": " Давайте посмотрим, какие типы данных существуют в языке C-Sharp."
        },
        {
            "timestamp": [
                1192.88,
                1197.78
            ],
            "text": " С первым типом данных мы уже познакомились. Его также называют целочисленным типом данных."
        },
        {
            "timestamp": [
                1197.78,
                1200.88
            ],
            "text": " Другой целочисленный тип данных носит название long."
        },
        {
            "timestamp": [
                1200.88,
                1207.56
            ],
            "text": " Его отличие от типа данных int заключается в том, что он позволяет хранить числа большего"
        },
        {
            "timestamp": [
                1207.56,
                1211.98
            ],
            "text": " размера, нежели чем тип данных int. То есть, Long позволяет"
        },
        {
            "timestamp": [
                1211.98,
                1217.06
            ],
            "text": " сохранить большее повеличение числа, чем тип данных int."
        },
        {
            "timestamp": [
                1217.06,
                1219.3
            ],
            "text": " Второй из представленных типов данных – это вещественный"
        },
        {
            "timestamp": [
                1219.3,
                1223.42
            ],
            "text": " тип. Он позволяет хранить дробные числа. Существует"
        },
        {
            "timestamp": [
                1223.42,
                1227.1
            ],
            "text": " две его разновидности – это типы данных float и double."
        },
        {
            "timestamp": [
                1227.42,
                1228.86
            ],
            "text": " Отличаются они размером."
        },
        {
            "timestamp": [
                1229.22,
                1235.5
            ],
            "text": " Тип данных может сохранить большую дробную часть по сравнению, чем тип данных float."
        },
        {
            "timestamp": [
                1236.66,
                1240.14
            ],
            "text": " Символьный тип данных используется для хранения отдельных символов."
        },
        {
            "timestamp": [
                1240.14,
                1245.58
            ],
            "text": " Будь то символы латинского алфавита, будь то цифры, будь то специальные символы."
        },
        {
            "timestamp": [
                1245.58,
                1250.34
            ],
            "text": " Ну и последний в списке – это логический тип данных. Этот тип данных позволяет сохранить всего"
        },
        {
            "timestamp": [
                1250.34,
                1257.24
            ],
            "text": " лишь два значения. Либо логическую истину – true, либо же логически ложное значение – false. Друзья,"
        },
        {
            "timestamp": [
                1257.24,
                1262.36
            ],
            "text": " его мы будем часто использовать в наших условных конструкциях и при создании циклов."
        },
        {
            "timestamp": [
                1262.36,
                1265.76
            ],
            "text": " Давайте расширим нашу программу и добавим в нее переменные"
        },
        {
            "timestamp": [
                1265.76,
                1271.44
            ],
            "text": " рассмотренных типов данных. Итак, вернемся к проекту task1 и добавим туда новые переменные."
        },
        {
            "timestamp": [
                1271.44,
                1280.1
            ],
            "text": " Создадим переменную с вещественным типом данных double, назовем ее, например, d и присвоим ей"
        },
        {
            "timestamp": [
                1280.1,
                1285.8
            ],
            "text": " некоторое значение с дробной частью, например, 5,55."
        },
        {
            "timestamp": [
                1286.38,
                1288.96
            ],
            "text": " Далее мы с вами создадим переменную типа данных"
        },
        {
            "timestamp": [
                1288.96,
                1292.76
            ],
            "text": " char от английского character, то есть символный тип данных."
        },
        {
            "timestamp": [
                1292.88,
                1296.18
            ],
            "text": " Назовем ее, например, c и поместим туда значение,"
        },
        {
            "timestamp": [
                1296.3,
                1298.96
            ],
            "text": " например, специальный символ восклицательного знака."
        },
        {
            "timestamp": [
                1299.4,
                1304.38
            ],
            "text": " Друзья, обращаю внимание, что переменная типа char,"
        },
        {
            "timestamp": [
                1304.88,
                1309.4
            ],
            "text": " ее значения хранятся в одинарных кавычках, в отличие от строк,"
        },
        {
            "timestamp": [
                1309.4,
                1316.24
            ],
            "text": " которые мы выводили на экран ранее. То есть символ и тип данных предполагает хранение одиночных"
        },
        {
            "timestamp": [
                1316.24,
                1326.58
            ],
            "text": " символов. Ну и третья переменная логического типа. Назовем ее, например, b и присвоим ей значение логической истинности."
        },
        {
            "timestamp": [
                1328.74,
                1329.08
            ],
            "text": " Выведем значение трех переменных на экран."
        },
        {
            "timestamp": [
                1331.44,
                1335.18
            ],
            "text": " Все так же воспользуемся методом консоли в WriteLine. Для ускорения разработки эту строку можно скопировать,"
        },
        {
            "timestamp": [
                1335.58,
                1339.62
            ],
            "text": " заменив только имена переменных, которые мы выводим на экран."
        },
        {
            "timestamp": [
                1344.66,
                1347.4
            ],
            "text": " Итак, проверим работоспособность нашей программы"
        },
        {
            "timestamp": [
                1347.4,
                1352.4
            ],
            "text": " Запустим ее, ожидаем увидеть значение четырех переменных"
        },
        {
            "timestamp": [
                1352.4,
                1357.84
            ],
            "text": " Что подтверждается выводом на экране"
        },
        {
            "timestamp": [
                1357.84,
                1361.22
            ],
            "text": " Сохраним наши наработки в репозитории git"
        },
        {
            "timestamp": [
                1361.22,
                1366.88
            ],
            "text": " Для этого проиндексируем файл с исходным кодом"
        },
        {
            "timestamp": [
                1366.88,
                1385.46
            ],
            "text": " program.cs командой git add командой git commit создадим commit И давайте дадим ему комментарий,"
        },
        {
            "timestamp": [
                1387.6,
                1390.06
            ],
            "text": " что были добавлены несколько перемен."
        },
        {
            "timestamp": [
                1395.4,
                1400.78
            ],
            "text": " А также укажем расположение этого проекта."
        },
        {
            "timestamp": [
                1409.68,
                1423.56
            ],
            "text": " И отправим наши наработки на удаленный репозиторий командой git push итак друзья рассмотрим второй пример в котором требуется создать целочисленные и вещественные"
        },
        {
            "timestamp": [
                1423.56,
                1425.64
            ],
            "text": " переменные а затем применить"
        },
        {
            "timestamp": [
                1425.64,
                1430.44
            ],
            "text": " к ним базовые арифметические операции, после чего вывести результаты на экран."
        },
        {
            "timestamp": [
                1430.44,
                1438.3
            ],
            "text": " Создадим для второго примера новый каталог. Назовем его task2."
        },
        {
            "timestamp": [
                1438.3,
                1448.32
            ],
            "text": " И создадим в каталоге task2 проект с помощью команды.NET New Console."
        },
        {
            "timestamp": [
                1459.4,
                1461.24
            ],
            "text": " Перейдем в файл со сходным кодом."
        },
        {
            "timestamp": [
                1470.2,
                1475.24
            ],
            "text": " Удалим код, который создан по умолчанию и давайте создадим парочку целочисленных переменных согласно заданию. Итак, создадим первую целочисленную переменную,"
        },
        {
            "timestamp": [
                1475.24,
                1489.0
            ],
            "text": " назовем ее, например, i1, дадим ей значение, допустим, 5, создадим вторую переменную с названием допустим i2 и проинициализируем ее значением 6. Вычислим"
        },
        {
            "timestamp": [
                1489.0,
                1498.84
            ],
            "text": " сумму двух созданных переменных. Для суммирования мы используем оператор плюс и давайте поместим"
        },
        {
            "timestamp": [
                1498.84,
                1506.84
            ],
            "text": " результат сложения двух этих переменных в новую переменную с именем, например, sam. Друзья, обращаю внимание, что в этом случае"
        },
        {
            "timestamp": [
                1506.84,
                1515.18
            ],
            "text": " я уже даю более осмысленное имя переменной, чтобы код был более читаемым. Здесь возникает вопрос,"
        },
        {
            "timestamp": [
                1515.18,
                1523.1
            ],
            "text": " а какой тип данных будет у переменной sam? Давайте остановимся на этом вопросе чуть подробнее. Друзья,"
        },
        {
            "timestamp": [
                1523.1,
                1526.66
            ],
            "text": " сложение – это бинарная операция, то есть в ней принимает"
        },
        {
            "timestamp": [
                1526.66,
                1532.6
            ],
            "text": " участие два операнта. В данном случае в ней принимает участие первое слагаемое слева от"
        },
        {
            "timestamp": [
                1532.6,
                1540.24
            ],
            "text": " плюса и второе справа от него. Дело в том, что тип данных у этой операции сложения будет формироваться"
        },
        {
            "timestamp": [
                1540.24,
                1546.5
            ],
            "text": " на основе типа данных оперантов – первого операнта и второго. И тут возникает важный вопрос, а каким"
        },
        {
            "timestamp": [
                1546.5,
                1553.12
            ],
            "text": " образом он будет формироваться? Друзья, для того чтобы дать ответ на этот вопрос, давайте сформулируем"
        },
        {
            "timestamp": [
                1553.12,
                1560.86
            ],
            "text": " два правила. Если типы данных у операндов совпадают, то в этом случае тип данных у результата будет"
        },
        {
            "timestamp": [
                1560.86,
                1569.34
            ],
            "text": " совпадать с типом данных этих операндов. В нашем случае операнды i1 и i2 имеют тип данных"
        },
        {
            "timestamp": [
                1569.34,
                1577.0
            ],
            "text": " int, поэтому тип данных у переменной sum, то есть у результата этого сложения, будет также int,"
        },
        {
            "timestamp": [
                1577.0,
                1587.62
            ],
            "text": " то есть она будет целочисленная. Итак, выведем результат сложения на экран с помощью команды консоли в WriteLine."
        },
        {
            "timestamp": [
                1587.62,
                1637.7
            ],
            "text": " Проверим правильность работы программы и запустим ее. 1.5 mm На экране мы видим сообщение Hello World."
        },
        {
            "timestamp": [
                1638.36,
                1643.06
            ],
            "text": " Друзья, дело в том, что после каждого изменения исходного кода его нужно сохранить."
        },
        {
            "timestamp": [
                1643.06,
                1651.04
            ],
            "text": " Сделать это можно с помощью горячей комбинации клавиш Ctrl-S. Сохраним изменения в исходном коде и"
        },
        {
            "timestamp": [
                1651.04,
                1658.36
            ],
            "text": " выполним команду еще раз. Как и ожидалось, на экране мы видим результат"
        },
        {
            "timestamp": [
                1658.36,
                1666.04
            ],
            "text": " сложения двух чисел. Но что если типы данных у операндов, которые участвуют в бинарной операции, будут разные?"
        },
        {
            "timestamp": [
                1666.68,
                1668.14
            ],
            "text": " Давайте посмотрим на этот пример"
        },
        {
            "timestamp": [
                1668.14,
                1672.58
            ],
            "text": " Итак, создадим еще одну переменную"
        },
        {
            "timestamp": [
                1672.58,
                1678.42
            ],
            "text": " Дадим ей тип данных, например, long и имя, допустим, l1"
        },
        {
            "timestamp": [
                1678.42,
                1681.9
            ],
            "text": " Поместим туда некоторое значение, пускай это будет 6"
        },
        {
            "timestamp": [
                1681.9,
                1689.54
            ],
            "text": " И давайте таким же образом вычислим сумму переменных l1 и i1, то есть сумму"
        },
        {
            "timestamp": [
                1689.54,
                1697.92
            ],
            "text": " переменной типа long и сумму переменной с типом int. И поместим результат в переменную sum2,"
        },
        {
            "timestamp": [
                1697.92,
                1709.72
            ],
            "text": " поскольку имя sum уже занято. Здесь возникает вопрос, а какой тип данных будет иметь переменная SAM2? Друзья,"
        },
        {
            "timestamp": [
                1709.72,
                1715.42
            ],
            "text": " давайте сформулируем второе правило. Если типы данных у операндов, которые участвуют в бинарной"
        },
        {
            "timestamp": [
                1715.42,
                1722.68
            ],
            "text": " операции, разные, то в этом случае тип данных у результата будет формироваться как наиболее"
        },
        {
            "timestamp": [
                1722.68,
                1725.5
            ],
            "text": " объемный или наиболее вместительный тип."
        },
        {
            "timestamp": [
                1725.84,
                1730.34
            ],
            "text": " Другими словами, если участвуют типы данных в операции long и int,"
        },
        {
            "timestamp": [
                1730.74,
                1733.18
            ],
            "text": " то тип данных у результата будет long,"
        },
        {
            "timestamp": [
                1733.44,
                1736.16
            ],
            "text": " поскольку диапазон значений у типа данных long"
        },
        {
            "timestamp": [
                1736.16,
                1739.66
            ],
            "text": " значительно шире, в разы больше, нежели чем у int."
        },
        {
            "timestamp": [
                1739.66,
                1741.02
            ],
            "text": " Или другой пример."
        },
        {
            "timestamp": [
                1741.3,
                1744.72
            ],
            "text": " Если в операции участвуют операнды с типами int и double,"
        },
        {
            "timestamp": [
                1752.84,
                1753.1
            ],
            "text": " то тип данных у результата операции будет double, поскольку double хранит как целые числа, так и числа с плавающей точкой."
        },
        {
            "timestamp": [
                1757.2,
                1761.78
            ],
            "text": " То есть этот тип данных является более вместительным и более объемным. Итак, в нашем примере участвуют операнды с типами данных long и int."
        },
        {
            "timestamp": [
                1768.96,
                1781.42
            ],
            "text": " long int. Согласно второму правилу, результат бинарной операции будет иметь наиболее вместительный тип, то есть long. С помощью модуля консолей и метода writeLine выведем результат на экран и проверим"
        },
        {
            "timestamp": [
                1781.42,
                1785.14
            ],
            "text": " работоспособность нашей программы."
        },
        {
            "timestamp": [
                1785.14,
                1788.16
            ],
            "text": " Не забудем сохранить файл со сходным кодом горячей"
        },
        {
            "timestamp": [
                1788.16,
                1792.78
            ],
            "text": " комбинации клавиш Ctrl-S и запустим наш проект."
        },
        {
            "timestamp": [
                1792.78,
                1796.08
            ],
            "text": " На экране мы видим результат вычисления первой операции"
        },
        {
            "timestamp": [
                1796.08,
                1797.08
            ],
            "text": " и второй."
        },
        {
            "timestamp": [
                1797.08,
                1800.28
            ],
            "text": " И давайте такую же операцию проделаем с типами данных"
        },
        {
            "timestamp": [
                1800.28,
                1802.4
            ],
            "text": " int и double."
        },
        {
            "timestamp": [
                1802.4,
                1807.32
            ],
            "text": " Переменная int у нас уже есть, это переменная i1. Создадим переменную double,"
        },
        {
            "timestamp": [
                1807.32,
                1814.82
            ],
            "text": " назовем ее допустим d1 и присвоим ей некоторое значение, пускай это будет 5,5."
        },
        {
            "timestamp": [
                1814.82,
                1829.24
            ],
            "text": " Вычислим сумму этих переменных d1 плюс i1 и поместим ее в переменную sum, допустим назовем 3, поскольку sum2 уже была занята."
        },
        {
            "timestamp": [
                1829.24,
                1839.5
            ],
            "text": " Итак, друзья, согласно второму правилу формирования типа данных у результата этой операции, типом"
        },
        {
            "timestamp": [
                1839.5,
                1845.9
            ],
            "text": " данных у переменной sum3 будет именно double, поскольку он является более объемным и более вместительным,"
        },
        {
            "timestamp": [
                1845.9,
                1854.74
            ],
            "text": " если выбирать из двух double и int. Точно так же пишем тип double. Итак, проделаем такие же шаги,"
        },
        {
            "timestamp": [
                1854.74,
                1860.62
            ],
            "text": " только с операцией умножения. Для операции умножения мы используем оператор звездочка,"
        },
        {
            "timestamp": [
                1860.62,
                1865.78
            ],
            "text": " перемножим сначала целочисленные переменные. Согласно первому правилу результат"
        },
        {
            "timestamp": [
                1865.78,
                1876.08
            ],
            "text": " будет иметь тип данных int. Давайте назовем его product1 от английского умножения. Давайте"
        },
        {
            "timestamp": [
                1876.08,
                1886.16
            ],
            "text": " назовем его product1, что в переводе с английского произведение. Перемножим две переменные i1, i2."
        },
        {
            "timestamp": [
                1889.9,
                1890.52
            ],
            "text": " Далее перемножим переменные типов данных long, int."
        },
        {
            "timestamp": [
                1895.0,
                1897.06
            ],
            "text": " И результат поместим в тип данных, который более объемный и более вместительный."
        },
        {
            "timestamp": [
                1909.98,
                1911.94
            ],
            "text": " l1 умножить на переменную i1. Результат поместим в переменную"
        },
        {
            "timestamp": [
                1911.94,
                1914.0
            ],
            "text": " product2 и третье"
        },
        {
            "timestamp": [
                1914.0,
                1916.06
            ],
            "text": " умножение это с участием"
        },
        {
            "timestamp": [
                1916.06,
                1917.54
            ],
            "text": " переменных double"
        },
        {
            "timestamp": [
                1917.54,
                1920.82
            ],
            "text": " и переменной int."
        },
        {
            "timestamp": [
                1921.26,
                1923.5
            ],
            "text": " Здесь, согласно второму правилу,"
        },
        {
            "timestamp": [
                1923.56,
                1929.66
            ],
            "text": " у результата этой операции будет тип double как наиболее вместительный."
        },
        {
            "timestamp": [
                1929.66,
                1936.36
            ],
            "text": " Переменную назовем, допустим, product3 и поместим туда произведение"
        },
        {
            "timestamp": [
                1936.36,
                1941.94
            ],
            "text": " целочисленной переменной на переменную типа double."
        },
        {
            "timestamp": [
                1941.94,
                1948.38
            ],
            "text": " Итак, друзья, выведем наши ответы на экран, чтобы убедиться в их правильности."
        },
        {
            "timestamp": [
                1948.38,
                1969.34
            ],
            "text": " Для ускорения разработки некоторые фрагменты кода можно копировать. Главное следить за отсутствием Итак, сохраним файл с исходным кодом, запустим наш проект."
        },
        {
            "timestamp": [
                1969.34,
                1976.24
            ],
            "text": " На экране мы видим 5 результатов наших арифметических операций."
        },
        {
            "timestamp": [
                1976.24,
                1979.2
            ],
            "text": " Сохраним наши наработки в репозитории git, перейдем"
        },
        {
            "timestamp": [
                1979.2,
                1981.82
            ],
            "text": " на один каталог повыше, проиндексируем наш каталог"
        },
        {
            "timestamp": [
                1981.82,
                2010.42
            ],
            "text": " task2 целиком командой git add, создадим соответствующий commit и отправим его на удаленный репозиторий."
        },
        {
            "timestamp": [
                2012.18,
                2012.52
            ],
            "text": " Рассмотрим операцию деления."
        },
        {
            "timestamp": [
                2016.36,
                2021.98
            ],
            "text": " При делении переменных тип данных у результата операции формируется по таким же правилам, как и в операциях сложения и умножения."
        },
        {
            "timestamp": [
                2022.46,
                2026.88
            ],
            "text": " Давайте посмотрим, как это работает и какие нюансы при этом могут возникать."
        },
        {
            "timestamp": [
                2027.5,
                2032.78
            ],
            "text": " При делении переменных правило формирования типа данных у результата работает точно так же."
        },
        {
            "timestamp": [
                2033.12,
                2037.16
            ],
            "text": " Однако при делении целых чисел результат может получаться иногда дробным."
        },
        {
            "timestamp": [
                2037.52,
                2038.78
            ],
            "text": " Давайте рассмотрим этот случай."
        },
        {
            "timestamp": [
                2038.78,
                2044.08
            ],
            "text": " Итак, разделим переменную i1 на переменную i2."
        },
        {
            "timestamp": [
                2044.06,
                2044.58
            ],
            "text": " Разделим переменную i1 на переменную i2."
        },
        {
            "timestamp": [
                2047.96,
                2048.4
            ],
            "text": " Результат поместим в переменную quotient,"
        },
        {
            "timestamp": [
                2050.76,
                2053.82
            ],
            "text": " что в переводе с английского означает «частный»."
        },
        {
            "timestamp": [
                2056.96,
                2059.2
            ],
            "text": " Согласно первому правилу формирования типа данных у результата бинарной операции,"
        },
        {
            "timestamp": [
                2059.6,
                2062.52
            ],
            "text": " здесь мы пишем тип данных int, целое число."
        },
        {
            "timestamp": [
                2063.2,
                2068.04
            ],
            "text": " Давайте посмотрим, какой результат мы получим и выведем его на экран."
        },
        {
            "timestamp": [
                2068.04,
                2075.9
            ],
            "text": " Выводим на экран значение переменной quotient, сохраняем файл с исходным кодом и запускаем наш"
        },
        {
            "timestamp": [
                2075.9,
                2087.34
            ],
            "text": " проект командой dotnet run. Итак, друзья, на экране мы видим значение 0, однако ожидали увидеть значение 5 шестых,"
        },
        {
            "timestamp": [
                2087.34,
                2094.28
            ],
            "text": " что примерно равно 0,8. А как вы думаете, почему так произошло? Друзья, на самом деле,"
        },
        {
            "timestamp": [
                2094.28,
                2100.7
            ],
            "text": " какой-то магии или странности здесь нет. Целый тип данных не предполагает хранение дробной части."
        },
        {
            "timestamp": [
                2100.7,
                2106.54
            ],
            "text": " В определении целых чисел у нас получается дробная часть, которая в нем сохранена"
        },
        {
            "timestamp": [
                2106.54,
                2112.56
            ],
            "text": " быть не может. Возникает вопрос, а как в этом случае нам сохранить эту дробную часть? Ответ"
        },
        {
            "timestamp": [
                2112.56,
                2118.26
            ],
            "text": " кроется в типе данных у результата операции деления. Если он будет вещественный, то это"
        },
        {
            "timestamp": [
                2118.26,
                2126.66
            ],
            "text": " позволит сохранить в нем дробную часть. Для этого необходимо, чтобы хотя бы один из операндов имел вещественный тип. Согласно второму"
        },
        {
            "timestamp": [
                2126.66,
                2132.54
            ],
            "text": " правилу, в этом случае у результата операции тип данных будет вещественный тип, и это позволит"
        },
        {
            "timestamp": [
                2132.54,
                2138.84
            ],
            "text": " в нем сохранить дробную часть. Воспользуемся ранее созданной переменной d1. Для удобства"
        },
        {
            "timestamp": [
                2138.84,
                2147.44
            ],
            "text": " проверки присвоим ей некоторое значение, например, 6, и поделим переменную i1, которая имеет целый тип,"
        },
        {
            "timestamp": [
                2147.44,
                2153.98
            ],
            "text": " на переменную d1, которая имеет тип данных double. Согласно второму правилу тип данных"
        },
        {
            "timestamp": [
                2153.98,
                2170.4
            ],
            "text": " у результата этого деления будет double. Ну и создадим переменную стип. Согласно второму правилу, результат у этой операции будет double."
        },
        {
            "timestamp": [
                2173.98,
                2177.6
            ],
            "text": " Дадим имя переменной, допустим, caution2."
        },
        {
            "timestamp": [
                2189.62,
                2195.2
            ],
            "text": " И выведем результат на экран."
        },
        {
            "timestamp": [
                2199.34,
                2199.98
            ],
            "text": " Сохраним изменения в файле и запустим проект команды.NET RAN."
        },
        {
            "timestamp": [
                2204.96,
                2205.36
            ],
            "text": " Ожидаем увидеть число, равное 0,8, что подтверждается выводом."
        },
        {
            "timestamp": [
                2208.14,
                2208.5
            ],
            "text": " Друзья, эти примеры могут показаться достаточно сложными,"
        },
        {
            "timestamp": [
                2213.02,
                2213.62
            ],
            "text": " но я рекомендую поэкспериментировать с ними и запустить их на своих данных."
        },
        {
            "timestamp": [
                2217.96,
                2220.56
            ],
            "text": " Эта тематика достаточно важная с точки зрения понимания взаимодействия различных типов данных в языке C-Sharp."
        },
        {
            "timestamp": [
                2220.92,
                2222.16
            ],
            "text": " Также еще один важный момент."
        },
        {
            "timestamp": [
                2222.16,
                2225.08
            ],
            "text": " Не стоит думать, что в языках программирования Python,"
        },
        {
            "timestamp": [
                2225.08,
                2232.0
            ],
            "text": " Perl, PHP, JavaScript эти особенности формирования типа данных у результатов операции отсутствуют."
        },
        {
            "timestamp": [
                2232.0,
                2238.0
            ],
            "text": " Напротив, они присутствуют там в полной мере, только скрыты от разработчика. Язык программирования"
        },
        {
            "timestamp": [
                2238.0,
                2245.12
            ],
            "text": " C-Sharp позволяет нам с ними познакомиться и понять, как они устроены под капотом. Итак, сохраним наши наработки в репозитории"
        },
        {
            "timestamp": [
                2245.12,
                2252.3
            ],
            "text": " git. Для этого перейдем на один каталог повыше и командой git add проиндексируем весь каталог"
        },
        {
            "timestamp": [
                2252.3,
                2275.5
            ],
            "text": " task2. Далее командой git commit сформируем commit с соответствующим комментариям и отправим наработки на удаленной репозитории."
        },
        {
            "timestamp": [
                2282.2,
                2285.54
            ],
            "text": " Друзья, для закрепления полученных навыков я даю"
        },
        {
            "timestamp": [
                2285.54,
                2288.36
            ],
            "text": " вам домашнее задание, в котором требуется вычислить"
        },
        {
            "timestamp": [
                2288.36,
                2292.16
            ],
            "text": " значение некоторой формулы, по сути она является дробью,"
        },
        {
            "timestamp": [
                2292.16,
                2294.84
            ],
            "text": " числитель которой является произведением двух целых"
        },
        {
            "timestamp": [
                2294.84,
                2298.14
            ],
            "text": " чисел, знаменатели вы можете видеть, их сумму."
        },
        {
            "timestamp": [
                2298.14,
                2301.98
            ],
            "text": " Друзья, обратите внимание на нюансы и особенности,"
        },
        {
            "timestamp": [
                2301.98,
                2307.62
            ],
            "text": " которые могут возникать при делении целых чисел. Друзья, давайте вспомним задачу из курса «Введение"
        },
        {
            "timestamp": [
                2307.62,
                2310.76
            ],
            "text": " в программирование», где нужно было найти вес самой"
        },
        {
            "timestamp": [
                2310.76,
                2312.1
            ],
            "text": " тяжелой гири."
        },
        {
            "timestamp": [
                2312.1,
                2315.48
            ],
            "text": " Напомню, на вход в эту задачу поступало 5 гирь с различными"
        },
        {
            "timestamp": [
                2315.48,
                2319.48
            ],
            "text": " весами и требовалось определить, какая гиря самая тяжелая"
        },
        {
            "timestamp": [
                2319.48,
                2322.32
            ],
            "text": " и вывести ее вес."
        },
        {
            "timestamp": [
                2322.32,
                2327.12
            ],
            "text": " Перед тем как решать эту задачу, давайте решим несколько упрощенный вариант, когда гирь"
        },
        {
            "timestamp": [
                2327.12,
                2334.24
            ],
            "text": " всего две и требуется найти вес также наиболее тяжелой гири. Если приводить аналогию с целыми"
        },
        {
            "timestamp": [
                2334.24,
                2339.6
            ],
            "text": " числами, то задача может быть сформулирована следующим образом. Дано два целых числа и вывести"
        },
        {
            "timestamp": [
                2339.6,
                2346.3
            ],
            "text": " на экран из них наибольшее из них. Перед тем как приступать к написанию кода, давайте выделим основные этапы"
        },
        {
            "timestamp": [
                2346.3,
                2352.0
            ],
            "text": " в решении этой задачи и построим ее блок-схему. Первым делом нам понадобится создание двух"
        },
        {
            "timestamp": [
                2352.0,
                2358.72
            ],
            "text": " переменных, которые будут хранить веса этих гирь. Можно назвать их, например, а и b. Следующим шагом"
        },
        {
            "timestamp": [
                2358.72,
                2367.2
            ],
            "text": " нам необходимо будет сравнить эти две переменные, какая из них больше. В случае, если первая переменная превышает вторую,"
        },
        {
            "timestamp": [
                2367.2,
                2373.6
            ],
            "text": " то мы просто выведем на экран эту переменную a. Иначе, если же это не так, то мы выведем на экран"
        },
        {
            "timestamp": [
                2373.6,
                2379.68
            ],
            "text": " значение второй переменной. Друзья, какие еще способы представления алгоритмов вам известны?"
        },
        {
            "timestamp": [
                2379.68,
                2385.98
            ],
            "text": " Совершенно верно, если вы вспомнили про представление алгоритмов в виде блок-схемы или же псевдокода."
        },
        {
            "timestamp": [
                2386.56,
                2390.06
            ],
            "text": " Итак, давайте построим блок-схему для этой задачи."
        },
        {
            "timestamp": [
                2390.26,
                2394.34
            ],
            "text": " Итак, давайте посмотрим, как может выглядеть блок-схема для решения этой задачи."
        },
        {
            "timestamp": [
                2395.04,
                2396.66
            ],
            "text": " Первое. Ввод переменных А и В."
        },
        {
            "timestamp": [
                2396.92,
                2401.18
            ],
            "text": " Для ввода мы используем блок-параллелограмм, то есть ввод-вывод данных."
        },
        {
            "timestamp": [
                2401.8,
                2406.96
            ],
            "text": " Далее у нас идет условие, в котором мы проверяем верно ли что переменная a превышает"
        },
        {
            "timestamp": [
                2406.96,
                2414.34
            ],
            "text": " значение переменной b. Изображаем это в блоке ромб и далее в зависимости от результата этого"
        },
        {
            "timestamp": [
                2414.34,
                2421.0
            ],
            "text": " сравнения мы можем идти по одной из двух веток. Либо это ветка yes вывод значения переменной а на"
        },
        {
            "timestamp": [
                2421.0,
                2426.38
            ],
            "text": " экран, либо вторая ветка no это вывод на экран переменной B. Итак,"
        },
        {
            "timestamp": [
                2426.38,
                2431.68
            ],
            "text": " после словесного описания алгоритма и построения его блок-схемы, давайте оживим его на языке C"
        },
        {
            "timestamp": [
                2431.68,
                2438.0
            ],
            "text": " sharp. Перейдем в редактор Visual Studio Code. В каталоге Lesson1 создадим каталог Task3 и"
        },
        {
            "timestamp": [
                2438.0,
                2449.7
            ],
            "text": " создадим в этом каталоге проект командой.NET New Console, предварительно в него перейдя."
        },
        {
            "timestamp": [
                2459.06,
                2468.64
            ],
            "text": " Перейдем в файл со сходным кодом, удалим код по ум умолчанию и согласно нашей схеме давайте создадим две"
        },
        {
            "timestamp": [
                2468.64,
                2477.52
            ],
            "text": " целочисленные переменные. Назовем ее переменная a. Допустим, пускай будет равна 5. Вторую переменную"
        },
        {
            "timestamp": [
                2477.52,
                2491.54
            ],
            "text": " назовем b. Пускай она будет равна 7. И теперь, друзья, нам нужно их сравнить. Для выполнения операции сравнения в подавляющем большинстве языков программирования используется оператор if."
        },
        {
            "timestamp": [
                2493.34,
                2500.12
            ],
            "text": " В языке C-sharp после оператора if мы указываем условие, помещая его в круглые скобочки."
        },
        {
            "timestamp": [
                2500.68,
                2509.24
            ],
            "text": " Условием у нас будет выражение, на которое мы можем дать ответ. Либо логическая истина,"
        },
        {
            "timestamp": [
                2509.24,
                2515.42
            ],
            "text": " либо логический ложный ответ. Далее нам требуется сравнить две переменные a и b на предмет того,"
        },
        {
            "timestamp": [
                2515.42,
                2521.24
            ],
            "text": " какая из них больше. Для сравнения переменных или каких-либо других проверок в большинстве"
        },
        {
            "timestamp": [
                2521.24,
                2527.36
            ],
            "text": " языков программирования используется оператор if. Далее в фуглскопах мы"
        },
        {
            "timestamp": [
                2527.36,
                2536.28
            ],
            "text": " указываем условие, то есть выражение, которое отвечает на вопрос верно ли что. Переменная а"
        },
        {
            "timestamp": [
                2536.28,
                2545.86
            ],
            "text": " больше чем b. То есть условие это выражение логического типа, которое имеет только два возможных ответа."
        },
        {
            "timestamp": [
                2546.06,
                2547.02
            ],
            "text": " True или False."
        },
        {
            "timestamp": [
                2547.32,
                2548.92
            ],
            "text": " Истина или ложь."
        },
        {
            "timestamp": [
                2549.28,
                2552.66
            ],
            "text": " Далее, в фигурных скобках"
        },
        {
            "timestamp": [
                2552.66,
                2554.8
            ],
            "text": " после конструкции if"
        },
        {
            "timestamp": [
                2554.8,
                2556.58
            ],
            "text": " и после самого условия"
        },
        {
            "timestamp": [
                2556.58,
                2559.2
            ],
            "text": " мы указываем код, который будет выполнен,"
        },
        {
            "timestamp": [
                2559.58,
                2560.86
            ],
            "text": " если это условие верно."
        },
        {
            "timestamp": [
                2562.86,
                2567.12
            ],
            "text": " В данном случае мы просто выводим на экран переменную a согласно"
        },
        {
            "timestamp": [
                2567.12,
                2570.88
            ],
            "text": " блок-схеме с помощью модуля консоли и метода"
        },
        {
            "timestamp": [
                2570.88,
                2582.42
            ],
            "text": " brightline. В противном случае, если же это выражение неверно, то есть b у нас либо"
        },
        {
            "timestamp": [
                2582.42,
                2586.54
            ],
            "text": " равно a, либо его превысило, мы код, который"
        },
        {
            "timestamp": [
                2586.54,
                2592.24
            ],
            "text": " соответствует этой ветви выполнения, размещаем после ключевого слова else."
        },
        {
            "timestamp": [
                2592.24,
                2605.92
            ],
            "text": " Помещаем его также в фигурных скобках. В этом случае мы напишем, что переменная b будет выведена на экран."
        },
        {
            "timestamp": [
                2607.68,
                2615.38
            ],
            "text": " Другими словами, если a превышает значение переменной b и это верно, то мы"
        },
        {
            "timestamp": [
                2615.38,
                2619.16
            ],
            "text": " выводим значение переменной a. В противном случае мы выводим значение"
        },
        {
            "timestamp": [
                2619.16,
                2626.28
            ],
            "text": " переменной b. Давайте проверим и запустим проект с помощью команды.NET RUN"
        },
        {
            "timestamp": [
                2626.28,
                2640.78
            ],
            "text": " На экране мы видим значение 7, что соответствует правильной работе алгоритма"
        },
        {
            "timestamp": [
                2640.78,
                2646.02
            ],
            "text": " Друзья, этот алгоритм и другие, которые мы будем разрабатывать, я рекомендую"
        },
        {
            "timestamp": [
                2646.02,
                2648.06
            ],
            "text": " проверять на разных значениях"
        },
        {
            "timestamp": [
                2648.06,
                2649.84
            ],
            "text": " входных переменных. То есть,"
        },
        {
            "timestamp": [
                2650.14,
                2652.08
            ],
            "text": " таким образом вы проверите работу"
        },
        {
            "timestamp": [
                2652.08,
                2654.16
            ],
            "text": " вашего алгоритма при различных"
        },
        {
            "timestamp": [
                2654.16,
                2655.22
            ],
            "text": " входных условиях."
        },
        {
            "timestamp": [
                2656.42,
                2657.46
            ],
            "text": " Применительно к нашему"
        },
        {
            "timestamp": [
                2657.46,
                2660.12
            ],
            "text": " случаю можно поменять местами."
        },
        {
            "timestamp": [
                2660.28,
                2662.2
            ],
            "text": " То есть, в А поместить переменную"
        },
        {
            "timestamp": [
                2662.2,
                2668.04
            ],
            "text": " заранее большего значения по величине нежели чем переменную b и"
        },
        {
            "timestamp": [
                2668.04,
                2679.5
            ],
            "text": " также проверить правильность работы запустим наш проект на экране видим значение переменной а что"
        },
        {
            "timestamp": [
                2679.5,
                2686.42
            ],
            "text": " говорит о правильной работе логарифм итак друзья сохраним наши наработки в репозитории git. Для этого целиком проиндексируем"
        },
        {
            "timestamp": [
                2686.42,
                2697.36
            ],
            "text": " проект каталог task3. Сформируем соответствующий commit."
        },
        {
            "timestamp": [
                2711.84,
                2721.84
            ],
            "text": " и отправим его на удаленный репозиторий."
        },
        {
            "timestamp": [
                2728.88,
                2735.16
            ],
            "text": " Друзья, вопрос на засыпку для знатоков системы контроля версии Git. А почему я использую ключевое слово main, а не master? Кто знает, какая в этом разница? Свои предположения можете написать в"
        },
        {
            "timestamp": [
                2735.16,
                2740.64
            ],
            "text": " комментариях под трансляцией. Итак, давайте рассмотрим эту же задачу, только с 5 гирями."
        },
        {
            "timestamp": [
                2740.64,
                2750.98
            ],
            "text": " Если приводить аналогию с набором чисел, то эта задача может быть формулирована следующим образом. Дан набор из пяти чисел и нужно определить большее из них. Перед тем,"
        },
        {
            "timestamp": [
                2751.08,
                2755.6
            ],
            "text": " как приступить к написанию кода, давайте вспомним алгоритм, который был предложен на лекции."
        },
        {
            "timestamp": [
                2756.38,
                2762.04
            ],
            "text": " Итак, для нахождения максимального из пяти чисел мы в начале алгоритма задаем переменную max,"
        },
        {
            "timestamp": [
                2762.48,
                2765.78
            ],
            "text": " которая изначально равна переменной a, то есть значение"
        },
        {
            "timestamp": [
                2765.78,
                2772.4
            ],
            "text": " первого числа или же значение веса первой гири. Далее мы проводим четыре подряд идущих сравнения,"
        },
        {
            "timestamp": [
                2772.4,
                2779.12
            ],
            "text": " чтобы выяснить, а не превышает ли очередное число текущее значение переменной max. Если это так,"
        },
        {
            "timestamp": [
                2779.12,
                2788.04
            ],
            "text": " то есть число превышает значение, то мы обновляем переменную max. Это вы можете видеть в блоках процесс под блоками решения."
        },
        {
            "timestamp": [
                2788.04,
                2792.4
            ],
            "text": " И по завершению этого алгоритма в переменной max будет храниться"
        },
        {
            "timestamp": [
                2792.4,
                2797.04
            ],
            "text": " наибольшее значение из 5 весов гирь или наибольшее"
        },
        {
            "timestamp": [
                2797.04,
                2798.52
            ],
            "text": " из 5 введенных чисел."
        },
        {
            "timestamp": [
                2798.52,
                2802.1
            ],
            "text": " Как и в двух предыдущих задачах, давайте перейдем"
        },
        {
            "timestamp": [
                2802.1,
                2806.14
            ],
            "text": " от графического представления алгоритма к коду на языке C-Sharp."
        },
        {
            "timestamp": [
                2806.68,
                2808.5
            ],
            "text": " Итак, перейдем в редактор Visual Studio Code,"
        },
        {
            "timestamp": [
                2808.82,
                2809.72
            ],
            "text": " создадим там каталог"
        },
        {
            "timestamp": [
                2809.72,
                2810.46
            ],
            "text": " Task4"
        },
        {
            "timestamp": [
                2810.46,
                2817.98
            ],
            "text": " и создадим в этом каталоге"
        },
        {
            "timestamp": [
                2817.98,
                2819.24
            ],
            "text": " новый проект."
        },
        {
            "timestamp": [
                2821.64,
                2823.08
            ],
            "text": " Все той же командой"
        },
        {
            "timestamp": [
                2823.08,
                2824.4
            ],
            "text": " можем воспользоваться"
        },
        {
            "timestamp": [
                2824.4,
                2828.0
            ],
            "text": " и взять ее из истории команд.NET New Console."
        },
        {
            "timestamp": [
                2828.0,
                2839.76
            ],
            "text": " Перейдем в файл с исходным кодом. Согласно блок-схеме создадим 5 целочисленных переменных"
        },
        {
            "timestamp": [
                2839.76,
                2848.66
            ],
            "text": " для хранения весов гирь и присвоим им некоторые произвольные значения."
        },
        {
            "timestamp": [
                2860.06,
                2870.68
            ],
            "text": " Друзья, обратите внимание, что символ присваивания я отделяю пробелом от имени переменной, а также пробелом от значения."
        },
        {
            "timestamp": [
                2871.34,
                2873.3
            ],
            "text": " Это делается для повышения читаемости."
        },
        {
            "timestamp": [
                2873.3,
                2878.84
            ],
            "text": " Это действие можно сделать автоматически, используя инструменты VS Code."
        },
        {
            "timestamp": [
                2879.2,
                2886.12
            ],
            "text": " Для этого необходимо целиком выделить интересующий фрагмент, нажать правой кнопкой мыши и найти пункт"
        },
        {
            "timestamp": [
                2886.12,
                2893.34
            ],
            "text": " меню формат документ. Эта опция отформатирует документ в соответствии с"
        },
        {
            "timestamp": [
                2893.34,
                2896.8
            ],
            "text": " рекомендациями по оформлению кода для языка C-Sharp."
        },
        {
            "timestamp": [
                2896.8,
                2909.24
            ],
            "text": " В частности, как вы можете видеть, добавились пробелы, отделяющие присваивание от имен переменных. Далее мы создадим переменную max, которая"
        },
        {
            "timestamp": [
                2909.24,
                2916.14
            ],
            "text": " изначально инициализируется первой переменной a. И согласно Болл-схеме нам необходимо сделать"
        },
        {
            "timestamp": [
                2916.14,
                2925.84
            ],
            "text": " четыре сравнения, чтобы определить не превышает ли каждая из переменных b, c, d, e нашу переменную max."
        },
        {
            "timestamp": [
                2927.98,
                2929.38
            ],
            "text": " Начнем с переменной b."
        },
        {
            "timestamp": [
                2931.3,
                2935.58
            ],
            "text": " Напоминаю, что в условии мы помещаем выражение типа bool."
        },
        {
            "timestamp": [
                2935.9,
                2939.84
            ],
            "text": " То есть логическое выражение, которое может иметь только два значения true и false."
        },
        {
            "timestamp": [
                2940.48,
                2944.56
            ],
            "text": " Далее в фигурных скобках мы помещаем код, который соответствует ветке yes."
        },
        {
            "timestamp": [
                2947.92,
                2948.54
            ],
            "text": " То есть если это условие верно."
        },
        {
            "timestamp": [
                2953.44,
                2954.98
            ],
            "text": " В данном случае, согласно блок-схеме, мы обновляем значение переменной max."
        },
        {
            "timestamp": [
                2959.88,
                2960.58
            ],
            "text": " И для ускорения разработки этот фрагмент кода можно скопировать и повторить его три раза."
        },
        {
            "timestamp": [
                2966.14,
                2966.64
            ],
            "text": " Обращаю внимание, что нужно быть внимательным при копировании, поскольку могут появляться опечатки."
        },
        {
            "timestamp": [
                2968.82,
                2970.82
            ],
            "text": " Итак, делаем соответствующие замены."
        },
        {
            "timestamp": [
                2976.38,
                2979.64
            ],
            "text": " Переменная D и пятая переменная E."
        },
        {
            "timestamp": [
                2984.94,
                2986.16
            ],
            "text": " Итак, друзья, следующий момент. Обратите внимание, что здесь отсутствует ветвь ELSE."
        },
        {
            "timestamp": [
                2991.4,
                2991.82
            ],
            "text": " Она отсутствует по той причине, что нет какого-то отдельного действия специального,"
        },
        {
            "timestamp": [
                2994.66,
                2998.12
            ],
            "text": " если это условие окажется неверным. Если проверяемое условие окажется неверным,"
        },
        {
            "timestamp": [
                2998.44,
                3001.42
            ],
            "text": " то никаких отдельных действий мы делать не будем,"
        },
        {
            "timestamp": [
                3001.76,
                3004.34
            ],
            "text": " а просто перейдем к следующей проверке."
        },
        {
            "timestamp": [
                3006.24,
                3016.32
            ],
            "text": " действий мы делать не будем, а просто перейдем к следующей проверке. Итак, выведем на экран значение переменной максимум, чтобы проверить правильность"
        },
        {
            "timestamp": [
                3016.32,
                3029.96
            ],
            "text": " работы алгоритма. Итак, проверяем еще раз все наши переменные,раняем файл со сходным кодом и командой.NET RUN"
        },
        {
            "timestamp": [
                3029.96,
                3039.92
            ],
            "text": " компилируем и запускаем проект. Ожидаем увидеть на экране 10."
        },
        {
            "timestamp": [
                3039.92,
                3047.52
            ],
            "text": " На экране мы действительно видим значение 10, что говорит"
        },
        {
            "timestamp": [
                3047.52,
                3049.46
            ],
            "text": " о правильной работе алгоритма."
        },
        {
            "timestamp": [
                3049.46,
                3051.86
            ],
            "text": " Однако правильность работы алгоритма я рекомендую"
        },
        {
            "timestamp": [
                3051.86,
                3054.3
            ],
            "text": " проверять и на других входных данных."
        },
        {
            "timestamp": [
                3054.3,
                3057.08
            ],
            "text": " Применительно к этой задаче можно использовать различные"
        },
        {
            "timestamp": [
                3057.08,
                3060.18
            ],
            "text": " наборы данных, в частности, когда наибольшее число"
        },
        {
            "timestamp": [
                3060.18,
                3064.1
            ],
            "text": " находится в начале списка, где-то в середине списка"
        },
        {
            "timestamp": [
                3064.1,
                3066.96
            ],
            "text": " или же в конце. Таким образом, вы проверите работу"
        },
        {
            "timestamp": [
                3066.96,
                3072.42
            ],
            "text": " этого логаритма при различных входных условиях. Итак, сохраним наши наработки в репозитории git."
        },
        {
            "timestamp": [
                3072.42,
                3085.12
            ],
            "text": " Проиндексируем целиком каталог task4. Далее создадим commit с соответствующим комментарием."
        },
        {
            "timestamp": [
                3085.12,
                3095.12
            ],
            "text": " И укажем, что этот каталог добавлен."
        },
        {
            "timestamp": [
                3095.12,
                3100.98
            ],
            "text": " Ну что, друзья, мы дошли до финального раздела этой"
        },
        {
            "timestamp": [
                3100.98,
                3101.98
            ],
            "text": " лекции."
        },
        {
            "timestamp": [
                3101.98,
                3103.56
            ],
            "text": " Это циклы в языке C-Sharp."
        },
        {
            "timestamp": [
                3103.56,
                3106.12
            ],
            "text": " В этом разделе мы вспомним, как циклы оформляются с помощью блок-схемы, а также запрограммилы в языке C-Sharp. В этом разделе мы вспомним, как циклы оформляются"
        },
        {
            "timestamp": [
                3106.12,
                3111.98
            ],
            "text": " с помощью блок-схемы, а также запрограммируем их на C-Sharp. Предлагаю привести вам 2-3 варианта"
        },
        {
            "timestamp": [
                3111.98,
                3118.66
            ],
            "text": " использования циклов в реальной жизни. А я пока приведу свои примеры. Первый пример заключается"
        },
        {
            "timestamp": [
                3118.66,
                3126.04
            ],
            "text": " в чтении непрочитанных сообщений электронной почты. В этом случае клиент подключается к серверу и извлекает сообщение,"
        },
        {
            "timestamp": [
                3126.26,
                3127.6
            ],
            "text": " пока не дойдет до конца."
        },
        {
            "timestamp": [
                3128.4,
                3131.7
            ],
            "text": " Второй пример, друзья, это сканирование антивирусных файлов"
        },
        {
            "timestamp": [
                3131.7,
                3134.22
            ],
            "text": " на предмет наличия в них вредоносного кода."
        },
        {
            "timestamp": [
                3134.22,
                3138.2
            ],
            "text": " В данном случае антивирус сканирует указанный каталог"
        },
        {
            "timestamp": [
                3138.2,
                3141.22
            ],
            "text": " до тех пор, пока не переберет все файлы."
        },
        {
            "timestamp": [
                3142.32,
                3144.34
            ],
            "text": " Ну и третий пример – это поисковые задачи,"
        },
        {
            "timestamp": [
                3144.6,
                3145.64
            ],
            "text": " в которых требуется найти"
        },
        {
            "timestamp": [
                3145.64,
                3150.86
            ],
            "text": " объект в каком-либо хранилище. В этом случае программа, которая осуществляет поиск целевого"
        },
        {
            "timestamp": [
                3150.86,
                3156.98
            ],
            "text": " объекта, переберет их всех, пока не найдет интересующий нас объект или не дойдет до конца."
        },
        {
            "timestamp": [
                3156.98,
                3163.16
            ],
            "text": " Итак, друзья, давайте рассмотрим базовую задачу на применение циклических конструкций. В этом"
        },
        {
            "timestamp": [
                3163.16,
                3165.1
            ],
            "text": " примере на вход подается некоторое"
        },
        {
            "timestamp": [
                3165.1,
                3172.04
            ],
            "text": " натуральное число n и требуется вывести на экран все числа, которые находятся в промежутке от 1 до"
        },
        {
            "timestamp": [
                3172.04,
                3178.42
            ],
            "text": " n. Для начала предлагаю сформулировать основные этапы этой задачи, затем мы с вами построим блок"
        },
        {
            "timestamp": [
                3178.42,
                3185.76
            ],
            "text": " схему, после чего оживим ее на языке C-sharp. Первым этапом мы вводим натуральное число n. Далее нам каким-то"
        },
        {
            "timestamp": [
                3185.76,
                3193.48
            ],
            "text": " образом нужно осуществить проход по числам от 1 и до n и вывести их на экран. Друзья, как вы"
        },
        {
            "timestamp": [
                3193.48,
                3198.9
            ],
            "text": " думаете, какой тип алгоритма здесь нам поможет? Совершенно верно, если вашим предположением был"
        },
        {
            "timestamp": [
                3198.9,
                3205.28
            ],
            "text": " цикл. В случае, если количество итераций или же повторяемых действий заранее неизвестно,"
        },
        {
            "timestamp": [
                3205.78,
                3208.38
            ],
            "text": " или превышает количество повторений 2-3,"
        },
        {
            "timestamp": [
                3208.68,
                3211.86
            ],
            "text": " в этом случае рекомендуется использовать именно этот вид алгоритма."
        },
        {
            "timestamp": [
                3211.86,
                3215.82
            ],
            "text": " В следующем этапе давайте построим блок-схему для этого алгоритма."
        },
        {
            "timestamp": [
                3216.62,
                3220.72
            ],
            "text": " Для этого, друзья, необходимо определиться с составляющими элементами цикла."
        },
        {
            "timestamp": [
                3221.16,
                3224.76
            ],
            "text": " Напомню, первый элемент – это повторяемое действие,"
        },
        {
            "timestamp": [
                3226.72,
                3231.86
            ],
            "text": " то есть то, что мы хотим повторять на каждой итерации. Второй элемент цикла это некоторые вспомогательные переменные. Как"
        },
        {
            "timestamp": [
                3231.86,
                3238.42
            ],
            "text": " правило, это переменная счетчик, но могут быть и другие. И третий компонент это самоусловие цикла,"
        },
        {
            "timestamp": [
                3238.42,
                3243.94
            ],
            "text": " то есть выражение типа bool или же логического типа, которое определяет будет выполняться"
        },
        {
            "timestamp": [
                3243.94,
                3249.8
            ],
            "text": " очередная итерация или нет. Друзья, в течение двух-трех минут предлагаю вам самостоятельно заполнить"
        },
        {
            "timestamp": [
                3249.8,
                3437.18
            ],
            "text": " элементы для этой блок-схемы, а затем проверим ваши наработки. you you you you you you you you Итак, давайте посмотрим, что у вас получилось."
        },
        {
            "timestamp": [
                3437.94,
                3442.84
            ],
            "text": " В качестве повторяемого действия мы будем использовать вывод на экран переменной i,"
        },
        {
            "timestamp": [
                3443.46,
                3449.18
            ],
            "text": " которая, в свою очередь, является той самой вспомогательной переменной счетчика. Изначально, обратите"
        },
        {
            "timestamp": [
                3449.18,
                3453.98
            ],
            "text": " внимание, она равна единице и в теле цикла она каждый раз увеличивается на"
        },
        {
            "timestamp": [
                3453.98,
                3460.34
            ],
            "text": " единицу. Условием цикла будет неравенство переменная i меньше либо равна n, то есть"
        },
        {
            "timestamp": [
                3460.34,
                3468.54
            ],
            "text": " неравенство, которое позволит нам вовремя остановить цикл в тот момент, когда переменная i дойдет до значения переменной n."
        },
        {
            "timestamp": [
                3468.54,
                3476.3
            ],
            "text": " Как только это произойдет и i сравняется с n, у нас выполнится последняя итерация цикла и на этом он остановится."
        },
        {
            "timestamp": [
                3476.78,
                3480.42
            ],
            "text": " Алгоритм решения задачи готов. Давайте попробуем оживить его на языке C-sharp."
        },
        {
            "timestamp": [
                3480.96,
                3482.16
            ],
            "text": " Итак, вернемся в редактор."
        },
        {
            "timestamp": [
                3483.68,
                3485.88
            ],
            "text": " В каталоге lesson1 создадим каталог"
        },
        {
            "timestamp": [
                3485.88,
                3488.28
            ],
            "text": " для нового задания."
        },
        {
            "timestamp": [
                3493.06,
                3494.1
            ],
            "text": " Перейдем в него"
        },
        {
            "timestamp": [
                3494.1,
                3496.26
            ],
            "text": " и создадим там"
        },
        {
            "timestamp": [
                3496.26,
                3496.88
            ],
            "text": " проект."
        },
        {
            "timestamp": [
                3503.9,
                3505.9
            ],
            "text": " Перейдем в файл со сходным кодом"
        },
        {
            "timestamp": [
                3505.9,
                3509.74
            ],
            "text": " И согласно блок-схеме создадим там переменную n"
        },
        {
            "timestamp": [
                3509.74,
                3513.62
            ],
            "text": " Допустим, равное числу 100"
        },
        {
            "timestamp": [
                3513.62,
                3517.62
            ],
            "text": " То есть это будет верхний предел для количества итераций"
        },
        {
            "timestamp": [
                3517.62,
                3519.86
            ],
            "text": " Далее создадим переменную счетчик i"
        },
        {
            "timestamp": [
                3519.86,
                3521.54
            ],
            "text": " Изначально она равна 1"
        },
        {
            "timestamp": [
                3521.54,
                3525.9
            ],
            "text": " И далее, друзья, нам нужно создать цикл на языке C-sharp."
        },
        {
            "timestamp": [
                3526.48,
                3531.58
            ],
            "text": " Для создания цикла в большинстве языков программирования можно использовать оператор while."
        },
        {
            "timestamp": [
                3532.9,
                3540.06
            ],
            "text": " После этого ключевого слова в круглых скобочках, так же как и в условной конструкции, мы указываем условие."
        },
        {
            "timestamp": [
                3540.58,
                3546.08
            ],
            "text": " То есть то условие, которое будет определять, выполняется ли следующая операция или нет."
        },
        {
            "timestamp": [
                3546.7,
                3549.66
            ],
            "text": " Согласно блок-схеме напишем условие для этого цикла."
        },
        {
            "timestamp": [
                3550.5,
                3552.58
            ],
            "text": " i меньше либо равно n."
        },
        {
            "timestamp": [
                3553.84,
                3561.14
            ],
            "text": " Пока выделены условия, то есть выражение типа bool верно, цикл будет выполняться."
        },
        {
            "timestamp": [
                3561.54,
                3564.34
            ],
            "text": " И очередная итерация будет запущена."
        },
        {
            "timestamp": [
                3568.94,
                3576.12
            ],
            "text": " В фигурных скобочках мы указываем тело цикла, то есть те операции, которые будут выполняться на каждом повторении этого цикла. Согласно"
        },
        {
            "timestamp": [
                3576.12,
                3587.86
            ],
            "text": " блок-схеме в цикле нам необходимо вывести значение переменной i. Сделаем это с помощью метода консолы Brightline."
        },
        {
            "timestamp": [
                3591.88,
                3594.5
            ],
            "text": " И передадим в качестве аргумента"
        },
        {
            "timestamp": [
                3594.5,
                3596.1
            ],
            "text": " переменную i."
        },
        {
            "timestamp": [
                3598.08,
                3600.64
            ],
            "text": " Не забываем перейти к следующему значению счетчика"
        },
        {
            "timestamp": [
                3600.64,
                3602.76
            ],
            "text": " и увеличить переменную i на единицу."
        },
        {
            "timestamp": [
                3608.88,
                3616.32
            ],
            "text": " Также, друзья, напомню вам про возможность автоматически отформатировать ваш код путем выделения его, нажатия правой кнопки и выбора"
        },
        {
            "timestamp": [
                3616.32,
                3621.52
            ],
            "text": " меню формат документ. Он сам расставит необходимые пробелы, а также перенос на новую строчку,"
        },
        {
            "timestamp": [
                3621.52,
                3625.32
            ],
            "text": " где это нужно. Давайте запустим наш код, посмотрим, что получилось."
        },
        {
            "timestamp": [
                3625.54,
                3628.06
            ],
            "text": " Итак, сохраним файл с исходным кодом program.cs"
        },
        {
            "timestamp": [
                3628.06,
                3632.18
            ],
            "text": " и выполним команду в каталоге с проектом.NET RAN."
        },
        {
            "timestamp": [
                3636.5,
                3639.96
            ],
            "text": " Ожидаем увидеть список целых чисел от 1 до 100."
        },
        {
            "timestamp": [
                3641.8,
                3647.14
            ],
            "text": " На экране мы видим числа, расположенные друг под другом от 1 до 100, что говорит"
        },
        {
            "timestamp": [
                3647.14,
                3653.56
            ],
            "text": " о правильном выполнении алгоритма. Однако, друзья, не всегда такой вывод может быть удобен,"
        },
        {
            "timestamp": [
                3653.56,
                3662.86
            ],
            "text": " особенно если количество чисел превышает 50, 100 и так далее. Иногда требуется вывести числа в строку."
        },
        {
            "timestamp": [
                3662.86,
                3667.82
            ],
            "text": " Для этого, друзья, необходимо использовать другой метод вывода на консоль."
        },
        {
            "timestamp": [
                3668.44,
                3672.08
            ],
            "text": " Давайте воспользуемся второй разновидностью вывода элементов на консоль."
        },
        {
            "timestamp": [
                3672.46,
                3675.04
            ],
            "text": " Для этого мы воспользуемся все тем же модулем консоли,"
        },
        {
            "timestamp": [
                3675.32,
                3677.6
            ],
            "text": " только воспользуемся методом вwrite."
        },
        {
            "timestamp": [
                3681.18,
                3684.82
            ],
            "text": " Предыдущий метод давайте закомментируем, то есть его отключим."
        },
        {
            "timestamp": [
                3689.18,
                3692.02
            ],
            "text": " Итак, друзья, давайте попробуем запустить наш код И посмотрим, как вывод будет выглядеть в этом случае"
        },
        {
            "timestamp": [
                3692.02,
                3697.0
            ],
            "text": " Как вы можете видеть, числа выведены в строку"
        },
        {
            "timestamp": [
                3697.0,
                3699.12
            ],
            "text": " Но между ними нет никаких разделителей"
        },
        {
            "timestamp": [
                3699.12,
                3703.18
            ],
            "text": " Друзья, какие у вас есть предположения, как это можно сделать?"
        },
        {
            "timestamp": [
                3703.16,
                3705.58
            ],
            "text": " Друзья, какие у вас есть предположения, как это можно сделать?"
        },
        {
            "timestamp": [
                3710.36,
                3711.06
            ],
            "text": " Самый простой вариант это добавить пробел после вывода каждого числа."
        },
        {
            "timestamp": [
                3713.76,
                3718.1
            ],
            "text": " Для этого можем воспользоваться тем же методом консоли в write, только в качестве аргумента передать ему просто пробел."
        },
        {
            "timestamp": [
                3718.94,
                3722.56
            ],
            "text": " Напомню, что пробел мы можем указать в одинарных кавычках,"
        },
        {
            "timestamp": [
                3723.02,
                3728.94
            ],
            "text": " то есть передавая значение типа char. Итак,"
        },
        {
            "timestamp": [
                3728.94,
                3736.8
            ],
            "text": " сохраним исходный код, запустим и посмотрим, каков будет результат. Итак, мы видим вывод"
        },
        {
            "timestamp": [
                3736.8,
                3742.32
            ],
            "text": " чисел в одну строку, они разделены пробелом, тем самым повышается их читаемость. Друзья,"
        },
        {
            "timestamp": [
                3742.32,
                3745.0
            ],
            "text": " обращаю ваше внимание, что входной параметр n,"
        },
        {
            "timestamp": [
                3745.16,
                3747.44
            ],
            "text": " который используется в нашем коде, можно менять."
        },
        {
            "timestamp": [
                3747.68,
                3751.2
            ],
            "text": " Его можно задать равным тысяче, сотне или миллиону."
        },
        {
            "timestamp": [
                3751.64,
                3753.7
            ],
            "text": " Плюс использования циклов заключается в том,"
        },
        {
            "timestamp": [
                3753.7,
                3758.5
            ],
            "text": " что при изменении входных данных нет необходимости менять ни алгоритм,"
        },
        {
            "timestamp": [
                3758.82,
                3760.04
            ],
            "text": " ни расширять объем кода."
        },
        {
            "timestamp": [
                3760.52,
                3762.72
            ],
            "text": " Итак, сохраним наши наработки в репозитории git."
        },
        {
            "timestamp": [
                3763.1,
                3766.54
            ],
            "text": " Для этого проиндексируем целиком наш созданный каталог task5."
        },
        {
            "timestamp": [
                3771.34,
                3773.3
            ],
            "text": " Сформируем соответствующий commit."
        },
        {
            "timestamp": [
                3783.5,
                3786.9
            ],
            "text": " Не забываем указывать имя команды git"
        },
        {
            "timestamp": [
                3786.9,
                3805.48
            ],
            "text": " и проверяем правильность указываемых ключей."
        },
        {
            "timestamp": [
                3807.62,
                3811.0
            ],
            "text": " Отправим наши наработки в удаленной репозитории."
        },
        {
            "timestamp": [
                3819.58,
                3823.64
            ],
            "text": " И на этом практическая часть нашей сегодняшней лекции заканчивается."
        },
        {
            "timestamp": [
                3824.34,
                3826.88
            ],
            "text": " Ну что, друзья, на этом первая лекция подошла к концу."
        },
        {
            "timestamp": [
                3827.2,
                3829.36
            ],
            "text": " Давайте подведем итоги сегодняшнего занятия."
        },
        {
            "timestamp": [
                3830.18,
                3832.84
            ],
            "text": " Напомним, мы рассмотрели важные характеристики языка C-Sharp,"
        },
        {
            "timestamp": [
                3833.1,
                3836.38
            ],
            "text": " которые позволили его выбрать в качестве основного инструмента"
        },
        {
            "timestamp": [
                3836.38,
                3838.46
            ],
            "text": " для решения задач на текущем курсе."
        },
        {
            "timestamp": [
                3838.9,
                3841.08
            ],
            "text": " Напомним, это его статическая типизация"
        },
        {
            "timestamp": [
                3841.08,
                3843.4
            ],
            "text": " и возможность создавать простые программы,"
        },
        {
            "timestamp": [
                3843.4,
                3845.86
            ],
            "text": " не перегружая их сложным синтаксисом."
        },
        {
            "timestamp": [
                3846.14,
                3849.36
            ],
            "text": " Затем мы настроили и проверили работоспособность окружения"
        },
        {
            "timestamp": [
                3849.36,
                3851.52
            ],
            "text": " для разработки программ на C-Sharp."
        },
        {
            "timestamp": [
                3851.78,
                3855.68
            ],
            "text": " Это платформа.NET и редактор Visual Studio Code с необходимыми"
        },
        {
            "timestamp": [
                3855.68,
                3856.44
            ],
            "text": " расширениями."
        },
        {
            "timestamp": [
                3856.54,
                3859.34
            ],
            "text": " После чего мы решили блок задач на работу с переменными,"
        },
        {
            "timestamp": [
                3859.72,
                3862.94
            ],
            "text": " арифметикой, условиями и циклическими конструкциями."
        },
        {
            "timestamp": [
                3863.28,
                3864.84
            ],
            "text": " На этом, друзья, я с вами прощаюсь."
        },
        {
            "timestamp": [
                3865.22,
                3866.46
            ],
            "text": " Благодарю за внимание."
        },
        {
            "timestamp": [
                3866.46,
                null
            ],
            "text": " Увидимся на семинарах и на лекции №2. you"
        }
    ]
}