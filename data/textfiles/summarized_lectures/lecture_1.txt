1. Денис рад приветствовать участников лекции о массивах в C-Sharp.
2. Массив представляет собой структуру данных, предназначенную для хранения элементов одного типа.
3. Индекс элемента массива обозначается с помощью квадратных скобок и начинается с нуля.
4. Массивы имеют конечный размер, поскольку объем памяти у нас всегда ограничен.
5. В языке C-Sharp создание массива состоит из трех основных этапов: указание типа данных для элемента массива, указание идентификатора или имени массива, заполнение массива.
1. Создание массива с помощью оператора new и указанием количества элементов.
2. Присвоение имени массиву.
3. Заполнение массива произвольными числами.
4. Вывод элементов массива на экран с помощью операции индексации и метода writeLine из модуля консоли.
5. Обращение к элементам массива за границами памяти вызывает ошибку.
1. Форматирование кода может быть выполнено с помощью меню формат документа или сочетания горячих клавиш shift alt f в C-Sharp.
2. В C-Sharp можно использовать упрощенный синтаксис для создания массивов, который позволяет создавать массивы без команды на выделение памяти.
3. Массивы могут быть использованы для хранения однотипных элементов, поиска элементов по критерию и вычисления характеристик от всего набора элементов.
4. Навыки работы с массивами могут быть применимы в разработке программного обеспечения и тестировании программного обеспечения.
1. Уровень специализации по языкам программирования для аналитиков, продакт-менеджеров и проект-менеджеров не требуется.
2. Навыки работы с массивами могут быть полезны для аналитиков, особенно при работе с большими объемами данных.
3. Продуктивность проект-менеджера может улучшиться благодаря знанию основ программирования.
4. Задача на вывод массива целых чисел от 1 до n требует создания массива, заполнения его и вывода на экран.
5. Блок-схема для решения этой задачи может быть модифицирована с использованием блока инициализации переменных и цикла while.
1. Воспользуемся средством C-Sharp для вывода на экран строки и помещать в нее переменную.
2. Для этого воспользуемся все тем же методом консоли в write. Только перед строкой мы поставим значок доллара и в самой строке значение очередного элемента массива array с индексом i поместим, обратите внимание, в фигурные скобки и добавим знак пробел.
3. Друзья, в этом случае то, что было помещено в фигурные скобки, будет рассматриваться как значение элемента массива или же, например, переменная, и будет выведено на экран именно то, что находится в памяти, то есть сам элемент массива.
4. Итак, давайте запустим наш код командой .NET RUN. На экране мы видим приветственное сообщение hello world, однако, друзья, такого кода в файле, да, в нашем program.cs нет. Такая ситуация часто возникает, если мы забываем сохранить изменения в исходном файле. Давайте сохраним изменения путем нажатия комбинации клавиш Ctrl-S и запустим наш код еще раз. На экране мы видим последовательность чисел от 1 до 10. Следовательно, для этого набора элементов алгоритм работает верно.
1. Заполним массив с клавиатуры при его создании.
2. В цикл прохода по элементам массива нам необходимо добавить проверку очередного элемента на четность.
3. Условие разместил в блоке решения и написал там array с индексом i из even, что переводится как четный ли элемент с индексом i.
4. Попытка перенести такое условие в язык программирования приведет к синтаксической ошибке.
5. Используем оператор вычисления остатка отделения и проверки на равенство.
1. Проверили, вывели, проверили, вывели.
2. Если не переходить к следующему элементу, то мы зациклим наш цикл.
3. Итак, сохраним изменения и запустим еще раз.
4. На экране мы видим четные числа, которые являются элементами этого массива.
5. Рекомендую проверить правильность работы этого алгоритма на различных входных данных.
1. Создаем массив из 5 весов гирь.
2. Используем цикл while для прохода по элементам массива.
3. Проверяем, не превышает ли очередной элемент массива значение переменной max.
4. Если это так, обновляем переменную max.
5. После завершения цикла выводим значение переменной max на экран.
1. Цикл for используется для перебора элементов массива или других коллекций.
2. Цикл while может быть применен, когда верхняя граница числа итераций не известна заранее.
3. Цикл foreach позволяет пройтись по каждому элементу коллекции без использования индекса.1. Имя у нее E.
2. Тип данных у этой переменной должен совпадать с типом данных у элементов массива.
3. Затем мы указываем ключевое слово IN и указываем сам массив, элементы которого нам требуется перебрать.
4. Работает цикл следующим образом. На каждой итерации в переменную цикла, в данном примере это переменная e, помещается, а если быть точнее копируется очередной элемент массива.
5. Этот цикл работает практически так же, как и цикл for, только в нем не используются индексы.
1. В начальное состояние и запустим цикл forEach.
2. Напомню, он состоит из переменной цикла с типом данных, точно таким же, как и тип данных у элемента массива.
3. В нашем случае это целое число.
4. Затем идет имя переменной, ключевое слово in и сам массив.
5. Друзья, обращение по индексу в этом цикле уже не используется.
1. Мости программных средств.
2. Подобные ситуации встречаются достаточно часто.
3. Изучение технической документации.
4. Некоторые технические термины теряют свой смысл или он искажается.
5. Рекомендация: введение словаря или тетради с техническими терминами.