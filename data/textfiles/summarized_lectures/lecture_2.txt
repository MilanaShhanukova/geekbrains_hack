1. Друзья, всех приветствую! Поздравляю вас с выходом на финишную прямую нашего курса. Сегодня мы рассматриваем заключительные тематики и подводим итоги проведенных занятий.
2. Данный план на сегодня включает определение рекурсии, рассмотрение ее примеров из жизни, а также рекурсия в контексте программирования и решение блок задач.
3. Отдельным пунктом обсудим отладку программ и рассмотрим два способа отладки на наших программах.
4. В заключение рассмотрим три полезных принципа разработки программ и проведем небольшое собеседование по тематике рекурсия.
5. Для новичков в программировании тематика рекурсии, рекурсивные алгоритмы обычно дается сложно. Поэтому перед тем, как говорить о рекурсии в контексте языка программирования, давайте рассмотрим это понятие в более широком смысле и приведем реальные примеры из жизни.
1. Рекурсия в программировании - это процесс, в котором функция вызывает саму себя.
2. Функцию, которая вызывает саму себя, называют рекурсивной.
3. Рекурсивный вызов - это вызов одной и той же функции снова и снова.
4. Базовый случай - это задача, которая является тривиальной или простой.
5. Для решения более сложных задач, мы уменьшаем параметры функции.
1. Рекурсия - это метод решения проблем, когда функция вызывает саму себя.
2. Для остановки рекурсии в коде нужно установить условия для ее остановки.
3. Если не делать это, то рекурсивные вызовы будут выполняться бесконечно.
4. Рекурсия останавливается, когда на очередном вызове становится понятно, что задача стала простейшей.
5. В этом случае рекурсийный вызов не делается и функцию завершают инструкции return.Вот суммаризация текста:
1. Рекурсия - это процесс, когда функция вызывает саму себя.
2. Раскручивание рекурсии - это возврат к местам вызова функций.
3. Места вызова функции и значения параметров сохраняются в памяти для корректного вывода на экран.
4. Эта область памяти, куда сохраняется вся эта информация, называется стэком.
1. Рекурсия влияет на последовательность операций в алгоритме.
2. Раскручивание рекурсии будет происходить независимо от того, где расположен рекурсивный вызов.
3. Рекурсия применяется для наиболее компактной и понятной реализации обхода дерева.
4. Алгоритм быстрой сортировки использует рекурсию для достижения высокой скорости работы.
5. Рекурсия используется для обхода каталогов файловой системы.
1. Интерполяция строки - более правильный термин для выражения.
1. Отладчик использует точки останова, чтобы приостанавливать работу программы на определенных строках кода.
2. Отладчик может быть запущен на любой строке кода, но обычно это делается на начале функции или на строке с условием.
3. Отладчик имеет кнопки для продолжения выполнения программы до следующей точки останова (F5), шага с обходом (F10) и шага с заходом (F11).
4. Точка останова может быть добавлена во время работы отладчика, что позволяет перемещаться по коду в режиме отладки.
5. Отладочный вывод позволяет увидеть результаты выполнения функций и параметры при рекурсивных вызовах.
1. Нажимая клавишу F5, мы перемещаемся между двумя точками останова и выполняем алгоритм.
2. Окно слева содержит имена переменных и их значения в определенный момент отладки.
3. Значение переменной n уменьшается от 5 до 1, после чего выполнение будет завершено.
4. Отладку можно использовать для поиска ошибок в коде и для проверки работы программы.
5. Другие способы отладки включают отладочную печать и использование отладчика.
1. Вначале считывается число с консоли.
2. Запускается цикл, в котором перебираются числа от 1 до n.
3. Каждый раз проверяются на четность.
4. Если это так, то число выводится на экран.
5. Существует нарушение принципа do not repeat yourself.
1. Друзья, на этом рефакторе этого фрагмента кода не заканчивается. И я предлагаю вам подумать, а как здесь применить принцип Ягнида, то есть избавиться от избыточной функциональности.
2. В качестве личных фрагментов можно рассмотреть переменные.
3. В качестве второго примера, где я бы хотел продемонстрировать нарушение принципа Ягни, это заполнение массива случайными числами.
4. Здесь создается массив на 10 элементов. Далее в цикле for он инициализируется нулями и затем, предварительно создав объекта Random, он уже инициализируется случайными числами.
5. Как вы думаете, есть ли в этом примере избыточная функциональность? То есть операции, от которых можно было бы избавиться.
1. Рекурсия - это процесс вызова функции изнутри самой себя.
2. В рекурсивной функции есть основные вычисления, рекурсивный вызов и простейший или базовый случай.
3. Базовый случай служит для остановки рекурсии.
4. Рекурсия применяется в обходах деревьев, сортировках и поиске файлов.
5. При использовании рекурсии нужно быть осторожным и проверять базовые случаи.