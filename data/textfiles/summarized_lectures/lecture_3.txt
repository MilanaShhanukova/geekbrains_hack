1. Приветствует всех участников курса и объясняет цель курса - изучение HTML и CSS.
2. Определяет основные моменты, функционал в HTML и CSS, а также рассказывает о том, что они не являются программированием.
3. Подчеркивает важность практики и уникальных составляющих в создании сайтов.
4. Вводит себя как преподавателя по верстанию сайтов на портале GeekBrands.
5. Обращает внимание на то, что HTML и CSS часто забываются при работе с JavaScript и React.
1. Курс начинается с припроцессоров, так как у нас уже имеются все знания и навыки в технологиях.
2. Мы будем рассказывать про новшества HTML5 и CSS3.
3. Мы также будем работать с адаптивом и анимацией.
4. У нас будет практика, которая будет заполнена теми же самыми новшествами и особенностями.
5. В каждом уроке будет практика, которая будет заполнена теми же самыми новшествами и особенностями.
1. Автор подсказывает, как устанавливать препроцессор.
2. Автор удаляет Visual Studio Code и все расширения, чтобы начать с чистого листа.
3. Автор говорит о том, что припроцессоры SAS очень популярны, но есть конкуренты.
4. Автор даёт примеры разных автомобилей и их особенностей.
5. Автор рекомендует использовать SAS, а также подводит итоги и переходит к основной теме урока.
1. Оличество программистов, которые постоянно сидят в Гугле, постоянно сидят с какими-то задачками, поэтому будем применять такой принцип именно в обучении.
2. Первое, с чего мы начинаем, это что такое припроцессоры. Определение: CSS припроцессоры – это программный подход к CSS.
3. Если мы хотим использовать большую часть функционала припроцессоров, то получается, что там уже будут переменные и еще много разных плюшек, с которыми нужно разобраться.
4. В анимации есть чаще всего проблемы, то есть у нас есть много элементиков, которые как-то двигаются, и они должны двигаться, например, рандомно.
5. Мы пока не прикручиваем к старому проекту. Я, опять же, подскажу основные моменты, можно ли это сделать и как это сделать.
1. Ввожу SAS.
2. Мы будем использовать припроцессор SAS.
3. У нас есть препроцессорный файл, он перегоняется в CSS, и CSS уже отдается браузеру.
4. Мы создали переменные, мы добавили в них значение.
5. Сейчас будет запускаться, будем читать эмуляции.
1. Что такое припроцессоры и почему их используют?
2. Как работает процесс создания припроцессора?
3. Какие преимущества имеются в использовании припроцессоров?
4. Как можно улучшить работу с припроцессорами?
5. Какие ограничения существуют при использовании припроцессоров?
1. Автор говорит о том, что препроцессор SASS устанавливает и работает без проблем.
2. Он также рекомендует размещать файлы CSS в отдельных папках для большего удобства работы.
3. Автор также говорит о том, что препроцессор SASS имеет большой функционал и активно развивается.
4. Он также рекомендует использовать препроцессоры для более сложных задач в CSS.
5. В целом, автор говорит о том, что препроцессор SASS является полезным инструментом для работы с CSS.
1. Описание препроцессоринга и его функционала.
2. Возможности препроцессорига и их использование.
3. Переменные в препроцессоре и их применение.
4. Добавление селективного цвета в переменную.
5. Преимущества использования переменных в проекте.
1. Очень удобный.
2. Придумываем название.
3. Название переменных я рекомендую писать в camel case, рекомендую писать на английском языке.
4. Начинается все со строчной буковки.
5. Не экономьте буковки.1. Истика: проверяем стили для Breadcrumb Link.
2. Выбираем текст и посмотрим на стили.
3. Отличающиеся части копируем.
4. Проверяем результат.
5. Переменные могут быть использованы для изменения цвета, размера и других параметров.
1. Работа с математикой для центрирования блоков.
2. Блок-центр используется для центрирования проекта.
3. Переменная ширины сайта используется для центрирования блока.
4. Использование математики для вычисления значений в CSS.
5. Добавление стилистики и контента для улучшения дизайна.Выход:
1. Создать переменную для цвета фона блоков header-left и header-right.
2. Задать значение высоты для блоков header-left и header-right.
3. Использовать паддинги для улучшения внешнего вида блоков.
4. Проверять работу центрирования блоков header-left и header-right.
5. Задать расстояние между блоками header-left и header-right.
1. Автор хочет подсказать о том, как работает пример с использованием хедера и блоков.
2. Он говорит о том, что у них есть хедер, который они не наполняют полностью.
3. У них также есть блок, который они назвали top head, который они добавляют в центр.
4. Автор показывает значение фона и говорит о том, что у них светло-розовый фон.
5. Он рассказывает о том, как можно использовать при процессоры для создания более сложных элементов на странице.
1. Существует идеальный вариант одного продукта.
2. Если у меня несколько продуктов, то их количество будет равно двум, трем и так далее.
3. На сайте есть Product Image.
4. Внутри продукта есть контент.
5. Внутри нашего продукта контента у нас есть название товара.
1. Автор хочет улучшить стилистику продукта.
2. Он использует значения цвета и отступов для блоков.
3. Он также добавляет переменные для удобства работы.
4. Автор проверяет, чтобы все элементы были стилизованы корректно.
5. В результате получается хорошо оформленный товар.
1. Автор рассказывает о том, как он решил проблему с шириной сайта и использовал переменные в своем коде.
2. Он также обсуждает вложенность и математические операции в коде.
3. Автор предостерегает от использования примесей в коде, но рекомендует импортировать отдельные модули.
4. Он также рассказывает о том, как он разбивает файлы стилей на категории и почему это важно.
5. Автор предостерегает от создания отдельных файлов стилей для кнопок и других маленьких элементов.Вывод:
1. Нижнее подчеркивание нужно для того, чтобы у нас на выходе был один CSS.
2. Припроцессорных много. CSS 1. Итак, что мне хочется? Я рекомендую переменные вынести в отдельный файл.
3. Внимание, в кавычках vars. Без нижнего подчеркивания, без расширения файла.
4. Миксины лучше всего хранить в отдельном файле. Поэтому мы с вами так и поступим.
5. Mixin это отдельный в данной ситуации файл это не обязательно можно создавать его в нашем файле я его подключил вот здесь.
1. Автор описал процесс создания миксина с использованием CSS и препроцессора LESS.
2. Он объяснил, как можно использовать миксины для улучшения кодирования и редактирования CSS.
3. Автор также рассмотрел наследование и фрагментирование в контексте препроцессоров.
4. Он поделился своим опытом работы с разными препроцессорами, такими как LESS и SASS.
5. В заключение автор настоятельно рекомендует использовать препроцессоры для улучшения кодирования CSS и повышения производительности.
1. Припроцессоры LES и SAS отлично работают, разница между ними минимальная.
2. Переход на новый припроцессор может потребовать час времени.
3. Припроцессоры можно использовать в команде.
4. Урок простого принципа был основан на курсе и теоретическом варианте.
5. Уроки включали установку, функционал и сравнение припроцессоров LES и SAS.